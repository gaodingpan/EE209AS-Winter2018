
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000264  00800100  00001a32  00001ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a32  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cb  00800364  00800364  00001d2a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001d2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  00001d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c129  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023f6  00000000  00000000  0000e2b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000260a  00000000  00000000  000106af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b18  00000000  00000000  00012cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000030a3  00000000  00000000  000137d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004800  00000000  00000000  00016877  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0001b077  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 00 	jmp	0x106	; 0x106 <__ctors_end>
       4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
       8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
       c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      18:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      20:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      3c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      40:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__vector_16>
      44:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      48:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_18>
      4c:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__vector_19>
      50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      54:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      58:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      5c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      60:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      64:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
      68:	42 03       	mulsu	r20, r18
      6a:	db 02       	muls	r29, r27
      6c:	46 03       	mulsu	r20, r22
      6e:	de 02       	muls	r29, r30
      70:	e1 02       	muls	r30, r17
      72:	e4 02       	muls	r30, r20
      74:	e8 02       	muls	r30, r24
      76:	eb 02       	muls	r30, r27
      78:	ee 02       	muls	r30, r30
      7a:	f1 02       	muls	r31, r17
      7c:	f4 02       	muls	r31, r20
      7e:	f7 02       	muls	r31, r23
      80:	fa 02       	muls	r31, r26
      82:	fd 02       	muls	r31, r29
      84:	00 03       	mulsu	r16, r16
      86:	04 03       	mulsu	r16, r20
      88:	07 03       	mulsu	r16, r23
      8a:	0a 03       	fmul	r16, r18
      8c:	4a 03       	fmul	r20, r18
      8e:	18 03       	fmul	r17, r16
      90:	1b 03       	fmul	r17, r19
      92:	40 03       	mulsu	r20, r16
      94:	1e 03       	fmul	r17, r22
      96:	40 03       	mulsu	r20, r16
      98:	22 03       	mulsu	r18, r18
      9a:	25 03       	mulsu	r18, r21
      9c:	29 03       	fmul	r18, r17
      9e:	40 03       	mulsu	r20, r16
      a0:	40 03       	mulsu	r20, r16
      a2:	2c 03       	fmul	r18, r20
      a4:	30 03       	mulsu	r19, r16
      a6:	33 03       	mulsu	r19, r19
      a8:	37 03       	mulsu	r19, r23
      aa:	3a 03       	fmul	r19, r18
      ac:	40 03       	mulsu	r20, r16
      ae:	3d 03       	fmul	r19, r21

000000b0 <__trampolines_end>:
      b0:	00 00       	nop
      b2:	00 08       	sbc	r0, r0
      b4:	00 02       	muls	r16, r16
      b6:	01 00       	.word	0x0001	; ????
      b8:	00 03       	mulsu	r16, r16
      ba:	04 07       	cpc	r16, r20
	...

000000c4 <digital_pin_to_bit_mask_PGM>:
      c4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d4:	04 08 10 20                                         ... 

000000d8 <digital_pin_to_port_PGM>:
      d8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      e8:	03 03 03 03                                         ....

000000ec <port_to_output_PGM>:
      ec:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000f6 <port_to_mode_PGM>:
      f6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000100 <__ctors_start>:
     100:	be 01       	movw	r22, r28
     102:	e2 05       	cpc	r30, r2
     104:	2b 09       	sbc	r18, r11

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d8 e0       	ldi	r29, 0x08	; 8
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61

00000112 <__do_copy_data>:
     112:	13 e0       	ldi	r17, 0x03	; 3
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	e2 e3       	ldi	r30, 0x32	; 50
     11a:	fa e1       	ldi	r31, 0x1A	; 26
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x10>
     11e:	05 90       	lpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a4 36       	cpi	r26, 0x64	; 100
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0xc>

00000128 <__do_clear_bss>:
     128:	24 e0       	ldi	r18, 0x04	; 4
     12a:	a4 e6       	ldi	r26, 0x64	; 100
     12c:	b3 e0       	ldi	r27, 0x03	; 3
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	af 32       	cpi	r26, 0x2F	; 47
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>

00000138 <__do_global_ctors>:
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	c3 e8       	ldi	r28, 0x83	; 131
     13c:	d0 e0       	ldi	r29, 0x00	; 0
     13e:	04 c0       	rjmp	.+8      	; 0x148 <__do_global_ctors+0x10>
     140:	21 97       	sbiw	r28, 0x01	; 1
     142:	fe 01       	movw	r30, r28
     144:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__tablejump2__>
     148:	c0 38       	cpi	r28, 0x80	; 128
     14a:	d1 07       	cpc	r29, r17
     14c:	c9 f7       	brne	.-14     	; 0x140 <__do_global_ctors+0x8>
     14e:	0e 94 b4 01 	call	0x368	; 0x368 <main>
     152:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <_exit>

00000156 <__bad_interrupt>:
     156:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__vector_default>
	...

0000015c <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     15c:	2f 92       	push	r2
     15e:	3f 92       	push	r3
     160:	4f 92       	push	r4
     162:	5f 92       	push	r5
     164:	6f 92       	push	r6
     166:	7f 92       	push	r7
     168:	8f 92       	push	r8
     16a:	9f 92       	push	r9
     16c:	af 92       	push	r10
     16e:	bf 92       	push	r11
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	e4 2f       	mov	r30, r20
     182:	f5 2f       	mov	r31, r21
     184:	41 90       	ld	r4, Z+
     186:	50 80       	ld	r5, Z
     188:	4f 92       	push	r4
     18a:	5f 92       	push	r5
     18c:	e4 2f       	mov	r30, r20
     18e:	f5 2f       	mov	r31, r21
     190:	4d b6       	in	r4, 0x3d	; 61
     192:	5e b6       	in	r5, 0x3e	; 62
     194:	41 92       	st	Z+, r4
     196:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     198:	0c 94 ce 00 	jmp	0x19c	; 0x19c <osEE_hal_restore_ctx>

0000019c <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     19c:	e6 2f       	mov	r30, r22
     19e:	f7 2f       	mov	r31, r23
     1a0:	41 90       	ld	r4, Z+
     1a2:	50 80       	ld	r5, Z
     1a4:	4d be       	out	0x3d, r4	; 61
     1a6:	5e be       	out	0x3e, r5	; 62
     1a8:	5f 90       	pop	r5
     1aa:	4f 90       	pop	r4
     1ac:	e6 2f       	mov	r30, r22
     1ae:	f7 2f       	mov	r31, r23
     1b0:	41 92       	st	Z+, r4
     1b2:	50 82       	st	Z, r5
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	9f 90       	pop	r9
     1ca:	8f 90       	pop	r8
     1cc:	7f 90       	pop	r7
     1ce:	6f 90       	pop	r6
     1d0:	5f 90       	pop	r5
     1d2:	4f 90       	pop	r4
     1d4:	3f 90       	pop	r3
     1d6:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     1d8:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <osEE_scheduler_task_wrapper_restore>

000001dc <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     1dc:	e6 2f       	mov	r30, r22
    mov r31, r23
     1de:	f7 2f       	mov	r31, r23
    ld  r20, z+
     1e0:	41 91       	ld	r20, Z+
    ld  r21, z
     1e2:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     1e4:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     1e6:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     1e8:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <osEE_scheduler_task_wrapper_run>

000001ec <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     1ec:	2f 92       	push	r2
     1ee:	3f 92       	push	r3
     1f0:	4f 92       	push	r4
     1f2:	5f 92       	push	r5
     1f4:	6f 92       	push	r6
     1f6:	7f 92       	push	r7
     1f8:	8f 92       	push	r8
     1fa:	9f 92       	push	r9
     1fc:	af 92       	push	r10
     1fe:	bf 92       	push	r11
     200:	cf 92       	push	r12
     202:	df 92       	push	r13
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	e4 2f       	mov	r30, r20
     212:	f5 2f       	mov	r31, r21
     214:	41 90       	ld	r4, Z+
     216:	50 80       	ld	r5, Z
     218:	4f 92       	push	r4
     21a:	5f 92       	push	r5
     21c:	e4 2f       	mov	r30, r20
     21e:	f5 2f       	mov	r31, r21
     220:	4d b6       	in	r4, 0x3d	; 61
     222:	5e b6       	in	r5, 0x3e	; 62
     224:	41 92       	st	Z+, r4
     226:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     228:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_ready2stacked>

0000022c <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     22c:	e8 2f       	mov	r30, r24
    mov r31, r25
     22e:	f9 2f       	mov	r31, r25
    ld  r20, z+
     230:	41 91       	ld	r20, Z+
    ld  r21, z
     232:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     234:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     236:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     238:	e6 2f       	mov	r30, r22
    mov r31, r23
     23a:	f7 2f       	mov	r31, r23

    ijmp
     23c:	09 94       	ijmp
	...

00000240 <_ZN8SPIClass5beginEv>:
     240:	cf 93       	push	r28
     242:	cf b7       	in	r28, 0x3f	; 63
     244:	f8 94       	cli
     246:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN8SPIClass11initializedE>
     24a:	81 11       	cpse	r24, r1
     24c:	27 c0       	rjmp	.+78     	; 0x29c <_ZN8SPIClass5beginEv+0x5c>
     24e:	e2 ee       	ldi	r30, 0xE2	; 226
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	84 91       	lpm	r24, Z
     254:	ee ec       	ldi	r30, 0xCE	; 206
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	94 91       	lpm	r25, Z
     25a:	e8 2f       	mov	r30, r24
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	ee 0f       	add	r30, r30
     260:	ff 1f       	adc	r31, r31
     262:	ea 50       	subi	r30, 0x0A	; 10
     264:	ff 4f       	sbci	r31, 0xFF	; 255
     266:	a5 91       	lpm	r26, Z+
     268:	b4 91       	lpm	r27, Z
     26a:	ec 91       	ld	r30, X
     26c:	e9 23       	and	r30, r25
     26e:	21 f4       	brne	.+8      	; 0x278 <_ZN8SPIClass5beginEv+0x38>
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	8a e0       	ldi	r24, 0x0A	; 10
     274:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     278:	61 e0       	ldi	r22, 0x01	; 1
     27a:	8a e0       	ldi	r24, 0x0A	; 10
     27c:	0e 94 23 07 	call	0xe46	; 0xe46 <pinMode>
     280:	8c b5       	in	r24, 0x2c	; 44
     282:	80 61       	ori	r24, 0x10	; 16
     284:	8c bd       	out	0x2c, r24	; 44
     286:	8c b5       	in	r24, 0x2c	; 44
     288:	80 64       	ori	r24, 0x40	; 64
     28a:	8c bd       	out	0x2c, r24	; 44
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	8d e0       	ldi	r24, 0x0D	; 13
     290:	0e 94 23 07 	call	0xe46	; 0xe46 <pinMode>
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	8b e0       	ldi	r24, 0x0B	; 11
     298:	0e 94 23 07 	call	0xe46	; 0xe46 <pinMode>
     29c:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN8SPIClass11initializedE>
     2a0:	8f 5f       	subi	r24, 0xFF	; 255
     2a2:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <_ZN8SPIClass11initializedE>
     2a6:	cf bf       	out	0x3f, r28	; 63
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <loop>:
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <ActivateTask>
     2b2:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <stk_wrong>
     2b6:	81 11       	cpse	r24, r1
     2b8:	1e c0       	rjmp	.+60     	; 0x2f6 <loop+0x4a>
     2ba:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <old_sp>
     2be:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <old_sp+0x1>
     2c2:	89 2b       	or	r24, r25
     2c4:	39 f4       	brne	.+14     	; 0x2d4 <loop+0x28>
     2c6:	8d b7       	in	r24, 0x3d	; 61
     2c8:	9e b7       	in	r25, 0x3e	; 62
     2ca:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <old_sp+0x1>
     2ce:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <old_sp>
     2d2:	08 95       	ret
     2d4:	20 91 69 03 	lds	r18, 0x0369	; 0x800369 <old_sp>
     2d8:	30 91 6a 03 	lds	r19, 0x036A	; 0x80036a <old_sp+0x1>
     2dc:	8d b7       	in	r24, 0x3d	; 61
     2de:	9e b7       	in	r25, 0x3e	; 62
     2e0:	28 17       	cp	r18, r24
     2e2:	39 07       	cpc	r19, r25
     2e4:	41 f0       	breq	.+16     	; 0x2f6 <loop+0x4a>
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <stk_wrong>
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2f2:	0c 94 5f 07 	jmp	0xebe	; 0xebe <digitalWrite>
     2f6:	08 95       	ret

000002f8 <setup>:
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2fe:	0e 94 23 07 	call	0xe46	; 0xe46 <pinMode>
     302:	26 e0       	ldi	r18, 0x06	; 6
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	52 ec       	ldi	r21, 0xC2	; 194
     308:	61 e0       	ldi	r22, 0x01	; 1
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	81 e9       	ldi	r24, 0x91	; 145
     30e:	93 e0       	ldi	r25, 0x03	; 3
     310:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN14HardwareSerial5beginEmh>
     314:	41 e0       	ldi	r20, 0x01	; 1
     316:	60 e1       	ldi	r22, 0x10	; 16
     318:	8c e6       	ldi	r24, 0x6C	; 108
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN7MCP_CAN5beginEhh>
     320:	88 23       	and	r24, r24
     322:	99 f0       	breq	.+38     	; 0x34a <setup+0x52>
     324:	68 e2       	ldi	r22, 0x28	; 40
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	81 e9       	ldi	r24, 0x91	; 145
     32a:	93 e0       	ldi	r25, 0x03	; 3
     32c:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN5Print7printlnEPKc>
     330:	61 e4       	ldi	r22, 0x41	; 65
     332:	71 e0       	ldi	r23, 0x01	; 1
     334:	81 e9       	ldi	r24, 0x91	; 145
     336:	93 e0       	ldi	r25, 0x03	; 3
     338:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN5Print7printlnEPKc>
     33c:	64 e6       	ldi	r22, 0x64	; 100
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 83 06 	call	0xd06	; 0xd06 <delay>
     348:	e5 cf       	rjmp	.-54     	; 0x314 <setup+0x1c>
     34a:	6c e5       	ldi	r22, 0x5C	; 92
     34c:	71 e0       	ldi	r23, 0x01	; 1
     34e:	81 e9       	ldi	r24, 0x91	; 145
     350:	93 e0       	ldi	r25, 0x03	; 3
     352:	0c 94 9e 09 	jmp	0x133c	; 0x133c <_ZN5Print7printlnEPKc>

00000356 <idle_hook>:
     356:	0e 94 56 01 	call	0x2ac	; 0x2ac <loop>
     35a:	8c ec       	ldi	r24, 0xCC	; 204
     35c:	97 e0       	ldi	r25, 0x07	; 7
     35e:	89 2b       	or	r24, r25
     360:	11 f0       	breq	.+4      	; 0x366 <idle_hook+0x10>
     362:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <_Z14serialEventRunv>
     366:	08 95       	ret

00000368 <main>:
     368:	0e 94 bf 06 	call	0xd7e	; 0xd7e <init>
     36c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <setup>
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 24 0a 	call	0x1448	; 0x1448 <StartOS>
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	08 95       	ret

0000037c <_GLOBAL__sub_I_led>:
     37c:	6a e0       	ldi	r22, 0x0A	; 10
     37e:	8c e6       	ldi	r24, 0x6C	; 108
     380:	93 e0       	ldi	r25, 0x03	; 3
     382:	0c 94 ad 04 	jmp	0x95a	; 0x95a <_ZN7MCP_CANC1Eh>

00000386 <_ZN8SPIClass16beginTransactionE11SPISettings>:
     386:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <_ZN8SPIClass13interruptModeE>
     38a:	22 23       	and	r18, r18
     38c:	99 f0       	breq	.+38     	; 0x3b4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     38e:	4f b7       	in	r20, 0x3f	; 63
     390:	f8 94       	cli
     392:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <_ZN8SPIClass13interruptModeE>
     396:	21 30       	cpi	r18, 0x01	; 1
     398:	59 f4       	brne	.+22     	; 0x3b0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     39a:	2d b3       	in	r18, 0x1d	; 29
     39c:	20 93 64 03 	sts	0x0364, r18	; 0x800364 <__data_end>
     3a0:	3d b3       	in	r19, 0x1d	; 29
     3a2:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <_ZN8SPIClass13interruptMaskE>
     3a6:	20 95       	com	r18
     3a8:	23 23       	and	r18, r19
     3aa:	2d bb       	out	0x1d, r18	; 29
     3ac:	4f bf       	out	0x3f, r20	; 63
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     3b0:	40 93 64 03 	sts	0x0364, r20	; 0x800364 <__data_end>
     3b4:	8c bd       	out	0x2c, r24	; 44
     3b6:	9d bd       	out	0x2d, r25	; 45
     3b8:	08 95       	ret

000003ba <_ZN8SPIClass8transferEh>:
     3ba:	8e bd       	out	0x2e, r24	; 46
     3bc:	00 00       	nop
     3be:	0d b4       	in	r0, 0x2d	; 45
     3c0:	07 fe       	sbrs	r0, 7
     3c2:	fd cf       	rjmp	.-6      	; 0x3be <_ZN8SPIClass8transferEh+0x4>
     3c4:	8e b5       	in	r24, 0x2e	; 46
     3c6:	08 95       	ret

000003c8 <_ZN8SPIClass14endTransactionEv>:
     3c8:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <_ZN8SPIClass13interruptModeE>
     3cc:	88 23       	and	r24, r24
     3ce:	61 f0       	breq	.+24     	; 0x3e8 <_ZN8SPIClass14endTransactionEv+0x20>
     3d0:	9f b7       	in	r25, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <_ZN8SPIClass13interruptModeE>
     3d8:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <__data_end>
     3dc:	21 30       	cpi	r18, 0x01	; 1
     3de:	19 f4       	brne	.+6      	; 0x3e6 <_ZN8SPIClass14endTransactionEv+0x1e>
     3e0:	8d bb       	out	0x1d, r24	; 29
     3e2:	9f bf       	out	0x3f, r25	; 63
     3e4:	08 95       	ret
     3e6:	8f bf       	out	0x3f, r24	; 63
     3e8:	08 95       	ret

000003ea <_ZN7MCP_CAN13mcp2515_resetEv>:
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	ec 01       	movw	r28, r24
     3f0:	80 e5       	ldi	r24, 0x50	; 80
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN8SPIClass16beginTransactionE11SPISettings>
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	8e 81       	ldd	r24, Y+6	; 0x06
     3fc:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     400:	80 ec       	ldi	r24, 0xC0	; 192
     402:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	8e 81       	ldd	r24, Y+6	; 0x06
     40a:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     40e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN8SPIClass14endTransactionEv>
     412:	6a e0       	ldi	r22, 0x0A	; 10
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	0c 94 83 06 	jmp	0xd06	; 0xd06 <delay>

00000422 <_ZN7MCP_CAN20mcp2515_readRegisterEh>:
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	ec 01       	movw	r28, r24
     42a:	16 2f       	mov	r17, r22
     42c:	80 e5       	ldi	r24, 0x50	; 80
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN8SPIClass16beginTransactionE11SPISettings>
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	8e 81       	ldd	r24, Y+6	; 0x06
     438:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     43c:	83 e0       	ldi	r24, 0x03	; 3
     43e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     442:	81 2f       	mov	r24, r17
     444:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     44e:	18 2f       	mov	r17, r24
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	8e 81       	ldd	r24, Y+6	; 0x06
     454:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     458:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN8SPIClass14endTransactionEv>
     45c:	81 2f       	mov	r24, r17
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	08 95       	ret

00000466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>:
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	1f 92       	push	r1
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	7c 01       	movw	r14, r24
     478:	16 2f       	mov	r17, r22
     47a:	80 e5       	ldi	r24, 0x50	; 80
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	49 83       	std	Y+1, r20	; 0x01
     480:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN8SPIClass16beginTransactionE11SPISettings>
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	f7 01       	movw	r30, r14
     488:	86 81       	ldd	r24, Z+6	; 0x06
     48a:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     494:	81 2f       	mov	r24, r17
     496:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     49a:	49 81       	ldd	r20, Y+1	; 0x01
     49c:	84 2f       	mov	r24, r20
     49e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	f7 01       	movw	r30, r14
     4a6:	86 81       	ldd	r24, Z+6	; 0x06
     4a8:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     4ac:	0f 90       	pop	r0
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN8SPIClass14endTransactionEv>

000004bc <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>:
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0xc>
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	7c 01       	movw	r14, r24
     4ce:	16 2f       	mov	r17, r22
     4d0:	80 e5       	ldi	r24, 0x50	; 80
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	2a 83       	std	Y+2, r18	; 0x02
     4d6:	49 83       	std	Y+1, r20	; 0x01
     4d8:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN8SPIClass16beginTransactionE11SPISettings>
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	f7 01       	movw	r30, r14
     4e0:	86 81       	ldd	r24, Z+6	; 0x06
     4e2:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     4e6:	85 e0       	ldi	r24, 0x05	; 5
     4e8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     4ec:	81 2f       	mov	r24, r17
     4ee:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     4f2:	49 81       	ldd	r20, Y+1	; 0x01
     4f4:	84 2f       	mov	r24, r20
     4f6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     4fa:	2a 81       	ldd	r18, Y+2	; 0x02
     4fc:	82 2f       	mov	r24, r18
     4fe:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	f7 01       	movw	r30, r14
     506:	86 81       	ldd	r24, Z+6	; 0x06
     508:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN8SPIClass14endTransactionEv>

0000051e <_ZN7MCP_CAN18mcp2515_readStatusEv>:
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	ec 01       	movw	r28, r24
     526:	80 e5       	ldi	r24, 0x50	; 80
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN8SPIClass16beginTransactionE11SPISettings>
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	8e 81       	ldd	r24, Y+6	; 0x06
     532:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     536:	80 ea       	ldi	r24, 0xA0	; 160
     538:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     542:	18 2f       	mov	r17, r24
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	8e 81       	ldd	r24, Y+6	; 0x06
     548:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     54c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN8SPIClass14endTransactionEv>
     550:	81 2f       	mov	r24, r17
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	08 95       	ret

0000055a <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>:
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	8c 01       	movw	r16, r24
     562:	c6 2f       	mov	r28, r22
     564:	26 2f       	mov	r18, r22
     566:	40 ee       	ldi	r20, 0xE0	; 224
     568:	6f e0       	ldi	r22, 0x0F	; 15
     56a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     56e:	6f e0       	ldi	r22, 0x0F	; 15
     570:	c8 01       	movw	r24, r16
     572:	0e 94 11 02 	call	0x422	; 0x422 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     576:	98 2f       	mov	r25, r24
     578:	90 7e       	andi	r25, 0xE0	; 224
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	9c 13       	cpse	r25, r28
     57e:	01 c0       	rjmp	.+2      	; 0x582 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x28>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	08 95       	ret

0000058a <_ZN7MCP_CAN18mcp2515_configRateEhh>:
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	41 30       	cpi	r20, 0x01	; 1
     594:	21 f0       	breq	.+8      	; 0x59e <_ZN7MCP_CAN18mcp2515_configRateEhh+0x14>
     596:	42 30       	cpi	r20, 0x02	; 2
     598:	09 f4       	brne	.+2      	; 0x59c <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12>
     59a:	3f c0       	rjmp	.+126    	; 0x61a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x90>
     59c:	71 c0       	rjmp	.+226    	; 0x680 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     59e:	46 2f       	mov	r20, r22
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	fa 01       	movw	r30, r20
     5a4:	31 97       	sbiw	r30, 0x01	; 1
     5a6:	e2 31       	cpi	r30, 0x12	; 18
     5a8:	f1 05       	cpc	r31, r1
     5aa:	08 f0       	brcs	.+2      	; 0x5ae <_ZN7MCP_CAN18mcp2515_configRateEhh+0x24>
     5ac:	69 c0       	rjmp	.+210    	; 0x680 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     5ae:	ec 5c       	subi	r30, 0xCC	; 204
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__tablejump2__>
     5b6:	c7 e8       	ldi	r28, 0x87	; 135
     5b8:	df ef       	ldi	r29, 0xFF	; 255
     5ba:	6e c0       	rjmp	.+220    	; 0x698 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x10e>
     5bc:	c7 e0       	ldi	r28, 0x07	; 7
     5be:	da eb       	ldi	r29, 0xBA	; 186
     5c0:	67 c0       	rjmp	.+206    	; 0x690 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     5c2:	c5 e8       	ldi	r28, 0x85	; 133
     5c4:	d1 ef       	ldi	r29, 0xF1	; 241
     5c6:	64 c0       	rjmp	.+200    	; 0x690 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     5c8:	c7 e0       	ldi	r28, 0x07	; 7
     5ca:	de eb       	ldi	r29, 0xBE	; 190
     5cc:	49 e0       	ldi	r20, 0x09	; 9
     5ce:	65 c0       	rjmp	.+202    	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     5d0:	c7 e8       	ldi	r28, 0x87	; 135
     5d2:	df ef       	ldi	r29, 0xFF	; 255
     5d4:	35 c0       	rjmp	.+106    	; 0x640 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     5d6:	c7 e8       	ldi	r28, 0x87	; 135
     5d8:	da ef       	ldi	r29, 0xFA	; 250
     5da:	32 c0       	rjmp	.+100    	; 0x640 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     5dc:	c7 e8       	ldi	r28, 0x87	; 135
     5de:	df ef       	ldi	r29, 0xFF	; 255
     5e0:	36 c0       	rjmp	.+108    	; 0x64e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     5e2:	c7 e0       	ldi	r28, 0x07	; 7
     5e4:	de eb       	ldi	r29, 0xBE	; 190
     5e6:	33 c0       	rjmp	.+102    	; 0x64e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     5e8:	c7 e0       	ldi	r28, 0x07	; 7
     5ea:	dd ea       	ldi	r29, 0xAD	; 173
     5ec:	30 c0       	rjmp	.+96     	; 0x64e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     5ee:	c7 e8       	ldi	r28, 0x87	; 135
     5f0:	da ef       	ldi	r29, 0xFA	; 250
     5f2:	2d c0       	rjmp	.+90     	; 0x64e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     5f4:	c6 e8       	ldi	r28, 0x86	; 134
     5f6:	d0 ef       	ldi	r29, 0xF0	; 240
     5f8:	2a c0       	rjmp	.+84     	; 0x64e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     5fa:	c7 e8       	ldi	r28, 0x87	; 135
     5fc:	da ef       	ldi	r29, 0xFA	; 250
     5fe:	2e c0       	rjmp	.+92     	; 0x65c <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     600:	c5 e8       	ldi	r28, 0x85	; 133
     602:	d1 ef       	ldi	r29, 0xF1	; 241
     604:	41 e4       	ldi	r20, 0x41	; 65
     606:	49 c0       	rjmp	.+146    	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     608:	c6 e8       	ldi	r28, 0x86	; 134
     60a:	d0 ef       	ldi	r29, 0xF0	; 240
     60c:	2e c0       	rjmp	.+92     	; 0x66a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     60e:	c4 e0       	ldi	r28, 0x04	; 4
     610:	d0 ea       	ldi	r29, 0xA0	; 160
     612:	2b c0       	rjmp	.+86     	; 0x66a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     614:	c2 e8       	ldi	r28, 0x82	; 130
     616:	d0 ed       	ldi	r29, 0xD0	; 208
     618:	28 c0       	rjmp	.+80     	; 0x66a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     61a:	46 2f       	mov	r20, r22
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	fa 01       	movw	r30, r20
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	e2 31       	cpi	r30, 0x12	; 18
     624:	f1 05       	cpc	r31, r1
     626:	60 f5       	brcc	.+88     	; 0x680 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     628:	ea 5b       	subi	r30, 0xBA	; 186
     62a:	ff 4f       	sbci	r31, 0xFF	; 255
     62c:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__tablejump2__>
     630:	c7 e0       	ldi	r28, 0x07	; 7
     632:	df eb       	ldi	r29, 0xBF	; 191
     634:	2d c0       	rjmp	.+90     	; 0x690 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     636:	c7 e0       	ldi	r28, 0x07	; 7
     638:	df eb       	ldi	r29, 0xBF	; 191
     63a:	02 c0       	rjmp	.+4      	; 0x640 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     63c:	c4 e0       	ldi	r28, 0x04	; 4
     63e:	d4 ea       	ldi	r29, 0xA4	; 164
     640:	47 e0       	ldi	r20, 0x07	; 7
     642:	2b c0       	rjmp	.+86     	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     644:	c7 e0       	ldi	r28, 0x07	; 7
     646:	df eb       	ldi	r29, 0xBF	; 191
     648:	02 c0       	rjmp	.+4      	; 0x64e <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     64a:	c6 e0       	ldi	r28, 0x06	; 6
     64c:	d4 eb       	ldi	r29, 0xB4	; 180
     64e:	43 e0       	ldi	r20, 0x03	; 3
     650:	24 c0       	rjmp	.+72     	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     652:	c7 e0       	ldi	r28, 0x07	; 7
     654:	df eb       	ldi	r29, 0xBF	; 191
     656:	02 c0       	rjmp	.+4      	; 0x65c <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     658:	c6 e0       	ldi	r28, 0x06	; 6
     65a:	d4 eb       	ldi	r29, 0xB4	; 180
     65c:	41 e0       	ldi	r20, 0x01	; 1
     65e:	1d c0       	rjmp	.+58     	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     660:	c5 e0       	ldi	r28, 0x05	; 5
     662:	d1 eb       	ldi	r29, 0xB1	; 177
     664:	fb cf       	rjmp	.-10     	; 0x65c <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     666:	c6 e0       	ldi	r28, 0x06	; 6
     668:	d4 eb       	ldi	r29, 0xB4	; 180
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	16 c0       	rjmp	.+44     	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     66e:	c5 e0       	ldi	r28, 0x05	; 5
     670:	d1 eb       	ldi	r29, 0xB1	; 177
     672:	fb cf       	rjmp	.-10     	; 0x66a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     674:	c2 e0       	ldi	r28, 0x02	; 2
     676:	d0 e9       	ldi	r29, 0x90	; 144
     678:	f8 cf       	rjmp	.-16     	; 0x66a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     67a:	c0 e0       	ldi	r28, 0x00	; 0
     67c:	d0 e8       	ldi	r29, 0x80	; 128
     67e:	f5 cf       	rjmp	.-22     	; 0x66a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	1a c0       	rjmp	.+52     	; 0x6b8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12e>
     684:	c7 e8       	ldi	r28, 0x87	; 135
     686:	df ef       	ldi	r29, 0xFF	; 255
     688:	4f e3       	ldi	r20, 0x3F	; 63
     68a:	07 c0       	rjmp	.+14     	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     68c:	c7 e8       	ldi	r28, 0x87	; 135
     68e:	df ef       	ldi	r29, 0xFF	; 255
     690:	4f e0       	ldi	r20, 0x0F	; 15
     692:	03 c0       	rjmp	.+6      	; 0x69a <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     694:	c7 e0       	ldi	r28, 0x07	; 7
     696:	df eb       	ldi	r29, 0xBF	; 191
     698:	4f e1       	ldi	r20, 0x1F	; 31
     69a:	8c 01       	movw	r16, r24
     69c:	6a e2       	ldi	r22, 0x2A	; 42
     69e:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6a2:	4d 2f       	mov	r20, r29
     6a4:	69 e2       	ldi	r22, 0x29	; 41
     6a6:	c8 01       	movw	r24, r16
     6a8:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6ac:	4c 2f       	mov	r20, r28
     6ae:	68 e2       	ldi	r22, 0x28	; 40
     6b0:	c8 01       	movw	r24, r16
     6b2:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>:
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	8c 01       	movw	r16, r24
     6ca:	c0 e3       	ldi	r28, 0x30	; 48
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	6c 2f       	mov	r22, r28
     6d0:	c8 01       	movw	r24, r16
     6d2:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6d6:	60 e1       	ldi	r22, 0x10	; 16
     6d8:	6c 0f       	add	r22, r28
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	c8 01       	movw	r24, r16
     6de:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6e2:	60 e2       	ldi	r22, 0x20	; 32
     6e4:	6c 0f       	add	r22, r28
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	c8 01       	movw	r24, r16
     6ea:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6ee:	cf 5f       	subi	r28, 0xFF	; 255
     6f0:	ce 33       	cpi	r28, 0x3E	; 62
     6f2:	61 f7       	brne	.-40     	; 0x6cc <_ZN7MCP_CAN22mcp2515_initCANBuffersEv+0xa>
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	60 e6       	ldi	r22, 0x60	; 96
     6f8:	c8 01       	movw	r24, r16
     6fa:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	60 e7       	ldi	r22, 0x70	; 112
     702:	c8 01       	movw	r24, r16
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	0c 94 33 02 	jmp	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>

0000070e <_ZN7MCP_CAN12mcp2515_initEhh>:
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	1f 92       	push	r1
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	7c 01       	movw	r14, r24
     722:	06 2f       	mov	r16, r22
     724:	49 83       	std	Y+1, r20	; 0x01
     726:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN7MCP_CAN13mcp2515_resetEv>
     72a:	60 e8       	ldi	r22, 0x80	; 128
     72c:	c7 01       	movw	r24, r14
     72e:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     732:	18 2f       	mov	r17, r24
     734:	49 81       	ldd	r20, Y+1	; 0x01
     736:	88 23       	and	r24, r24
     738:	19 f0       	breq	.+6      	; 0x740 <_ZN7MCP_CAN12mcp2515_initEhh+0x32>
     73a:	68 eb       	ldi	r22, 0xB8	; 184
     73c:	71 e0       	ldi	r23, 0x01	; 1
     73e:	37 c0       	rjmp	.+110    	; 0x7ae <_ZN7MCP_CAN12mcp2515_initEhh+0xa0>
     740:	62 ed       	ldi	r22, 0xD2	; 210
     742:	71 e0       	ldi	r23, 0x01	; 1
     744:	81 e9       	ldi	r24, 0x91	; 145
     746:	93 e0       	ldi	r25, 0x03	; 3
     748:	49 83       	std	Y+1, r20	; 0x01
     74a:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN5Print5printEPKc>
     74e:	49 81       	ldd	r20, Y+1	; 0x01
     750:	60 2f       	mov	r22, r16
     752:	c7 01       	movw	r24, r14
     754:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN7MCP_CAN18mcp2515_configRateEhh>
     758:	88 23       	and	r24, r24
     75a:	19 f0       	breq	.+6      	; 0x762 <_ZN7MCP_CAN12mcp2515_initEhh+0x54>
     75c:	60 ef       	ldi	r22, 0xF0	; 240
     75e:	71 e0       	ldi	r23, 0x01	; 1
     760:	26 c0       	rjmp	.+76     	; 0x7ae <_ZN7MCP_CAN12mcp2515_initEhh+0xa0>
     762:	62 e0       	ldi	r22, 0x02	; 2
     764:	72 e0       	ldi	r23, 0x02	; 2
     766:	81 e9       	ldi	r24, 0x91	; 145
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN5Print5printEPKc>
     76e:	c7 01       	movw	r24, r14
     770:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>
     774:	43 e0       	ldi	r20, 0x03	; 3
     776:	6b e2       	ldi	r22, 0x2B	; 43
     778:	c7 01       	movw	r24, r14
     77a:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     77e:	24 e0       	ldi	r18, 0x04	; 4
     780:	44 e6       	ldi	r20, 0x64	; 100
     782:	60 e6       	ldi	r22, 0x60	; 96
     784:	c7 01       	movw	r24, r14
     786:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	40 e6       	ldi	r20, 0x60	; 96
     78e:	60 e7       	ldi	r22, 0x70	; 112
     790:	c7 01       	movw	r24, r14
     792:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	c7 01       	movw	r24, r14
     79a:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     79e:	18 2f       	mov	r17, r24
     7a0:	88 23       	and	r24, r24
     7a2:	19 f0       	breq	.+6      	; 0x7aa <_ZN7MCP_CAN12mcp2515_initEhh+0x9c>
     7a4:	67 e1       	ldi	r22, 0x17	; 23
     7a6:	72 e0       	ldi	r23, 0x02	; 2
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <_ZN7MCP_CAN12mcp2515_initEhh+0xa0>
     7aa:	62 e3       	ldi	r22, 0x32	; 50
     7ac:	72 e0       	ldi	r23, 0x02	; 2
     7ae:	81 e9       	ldi	r24, 0x91	; 145
     7b0:	93 e0       	ldi	r25, 0x03	; 3
     7b2:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN5Print5printEPKc>
     7b6:	81 2f       	mov	r24, r17
     7b8:	0f 90       	pop	r0
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	08 95       	ret

000007c8 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_>:
     7c8:	3f 92       	push	r3
     7ca:	4f 92       	push	r4
     7cc:	5f 92       	push	r5
     7ce:	6f 92       	push	r6
     7d0:	7f 92       	push	r7
     7d2:	8f 92       	push	r8
     7d4:	9f 92       	push	r9
     7d6:	af 92       	push	r10
     7d8:	bf 92       	push	r11
     7da:	cf 92       	push	r12
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x24>
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x26>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	4c 01       	movw	r8, r24
     7f4:	56 2e       	mov	r5, r22
     7f6:	5a 01       	movw	r10, r20
     7f8:	39 01       	movw	r6, r18
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	fc 01       	movw	r30, r24
     7fe:	86 81       	ldd	r24, Z+6	; 0x06
     800:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     804:	85 2d       	mov	r24, r5
     806:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	2c 01       	movw	r4, r24
     810:	e4 e0       	ldi	r30, 0x04	; 4
     812:	3e 2e       	mov	r3, r30
     814:	38 0e       	add	r3, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     81c:	f2 01       	movw	r30, r4
     81e:	81 93       	st	Z+, r24
     820:	2f 01       	movw	r4, r30
     822:	3e 12       	cpse	r3, r30
     824:	f8 cf       	rjmp	.-16     	; 0x816 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x4e>
     826:	2c 81       	ldd	r18, Y+4	; 0x04
     828:	23 fb       	bst	r18, 3
     82a:	88 27       	eor	r24, r24
     82c:	80 f9       	bld	r24, 0
     82e:	f8 01       	movw	r30, r16
     830:	80 83       	st	Z, r24
     832:	3a 81       	ldd	r19, Y+2	; 0x02
     834:	49 81       	ldd	r20, Y+1	; 0x01
     836:	83 2f       	mov	r24, r19
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	75 e0       	ldi	r23, 0x05	; 5
     83c:	95 95       	asr	r25
     83e:	87 95       	ror	r24
     840:	7a 95       	dec	r23
     842:	e1 f7       	brne	.-8      	; 0x83c <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x74>
     844:	f8 e0       	ldi	r31, 0x08	; 8
     846:	4f 9f       	mul	r20, r31
     848:	80 0d       	add	r24, r0
     84a:	91 1d       	adc	r25, r1
     84c:	11 24       	eor	r1, r1
     84e:	09 2e       	mov	r0, r25
     850:	00 0c       	add	r0, r0
     852:	aa 0b       	sbc	r26, r26
     854:	bb 0b       	sbc	r27, r27
     856:	f5 01       	movw	r30, r10
     858:	80 83       	st	Z, r24
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	a2 83       	std	Z+2, r26	; 0x02
     85e:	b3 83       	std	Z+3, r27	; 0x03
     860:	33 ff       	sbrs	r19, 3
     862:	38 c0       	rjmp	.+112    	; 0x8d4 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x10c>
     864:	80 81       	ld	r24, Z
     866:	91 81       	ldd	r25, Z+1	; 0x01
     868:	a2 81       	ldd	r26, Z+2	; 0x02
     86a:	b3 81       	ldd	r27, Z+3	; 0x03
     86c:	42 e0       	ldi	r20, 0x02	; 2
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	4a 95       	dec	r20
     878:	d1 f7       	brne	.-12     	; 0x86e <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0xa6>
     87a:	33 70       	andi	r19, 0x03	; 3
     87c:	83 0f       	add	r24, r19
     87e:	91 1d       	adc	r25, r1
     880:	a1 1d       	adc	r26, r1
     882:	b1 1d       	adc	r27, r1
     884:	80 83       	st	Z, r24
     886:	91 83       	std	Z+1, r25	; 0x01
     888:	a2 83       	std	Z+2, r26	; 0x02
     88a:	b3 83       	std	Z+3, r27	; 0x03
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	a2 81       	ldd	r26, Z+2	; 0x02
     892:	b3 81       	ldd	r27, Z+3	; 0x03
     894:	ba 2f       	mov	r27, r26
     896:	a9 2f       	mov	r26, r25
     898:	98 2f       	mov	r25, r24
     89a:	88 27       	eor	r24, r24
     89c:	3b 81       	ldd	r19, Y+3	; 0x03
     89e:	83 0f       	add	r24, r19
     8a0:	91 1d       	adc	r25, r1
     8a2:	a1 1d       	adc	r26, r1
     8a4:	b1 1d       	adc	r27, r1
     8a6:	80 83       	st	Z, r24
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	a2 83       	std	Z+2, r26	; 0x02
     8ac:	b3 83       	std	Z+3, r27	; 0x03
     8ae:	80 81       	ld	r24, Z
     8b0:	91 81       	ldd	r25, Z+1	; 0x01
     8b2:	a2 81       	ldd	r26, Z+2	; 0x02
     8b4:	b3 81       	ldd	r27, Z+3	; 0x03
     8b6:	ba 2f       	mov	r27, r26
     8b8:	a9 2f       	mov	r26, r25
     8ba:	98 2f       	mov	r25, r24
     8bc:	88 27       	eor	r24, r24
     8be:	82 0f       	add	r24, r18
     8c0:	91 1d       	adc	r25, r1
     8c2:	a1 1d       	adc	r26, r1
     8c4:	b1 1d       	adc	r27, r1
     8c6:	80 83       	st	Z, r24
     8c8:	91 83       	std	Z+1, r25	; 0x01
     8ca:	a2 83       	std	Z+2, r26	; 0x02
     8cc:	b3 83       	std	Z+3, r27	; 0x03
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	f3 01       	movw	r30, r6
     8d2:	80 83       	st	Z, r24
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     8da:	8f 70       	andi	r24, 0x0F	; 15
     8dc:	f7 01       	movw	r30, r14
     8de:	80 83       	st	Z, r24
     8e0:	56 01       	movw	r10, r12
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	f7 01       	movw	r30, r14
     8e6:	80 81       	ld	r24, Z
     8e8:	18 17       	cp	r17, r24
     8ea:	50 f4       	brcc	.+20     	; 0x900 <__stack+0x1>
     8ec:	18 30       	cpi	r17, 0x08	; 8
     8ee:	41 f0       	breq	.+16     	; 0x900 <__stack+0x1>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8SPIClass8transferEh>
     8f6:	f5 01       	movw	r30, r10
     8f8:	81 93       	st	Z+, r24
     8fa:	5f 01       	movw	r10, r30
     8fc:	1f 5f       	subi	r17, 0xFF	; 255
     8fe:	f2 cf       	rjmp	.-28     	; 0x8e4 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x11c>
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	f4 01       	movw	r30, r8
     904:	86 81       	ldd	r24, Z+6	; 0x06
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	bf 90       	pop	r11
     920:	af 90       	pop	r10
     922:	9f 90       	pop	r9
     924:	8f 90       	pop	r8
     926:	7f 90       	pop	r7
     928:	6f 90       	pop	r6
     92a:	5f 90       	pop	r5
     92c:	4f 90       	pop	r4
     92e:	3f 90       	pop	r3
     930:	0c 94 5f 07 	jmp	0xebe	; 0xebe <digitalWrite>

00000934 <_ZN7MCP_CAN7init_CSEh>:
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	ec 01       	movw	r28, r24
     93a:	66 23       	and	r22, r22
     93c:	59 f0       	breq	.+22     	; 0x954 <_ZN7MCP_CAN7init_CSEh+0x20>
     93e:	86 2f       	mov	r24, r22
     940:	6e 83       	std	Y+6, r22	; 0x06
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	0e 94 23 07 	call	0xe46	; 0xe46 <pinMode>
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	8e 81       	ldd	r24, Y+6	; 0x06
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	0c 94 5f 07 	jmp	0xebe	; 0xebe <digitalWrite>
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <_ZN7MCP_CANC1Eh>:
     95a:	fc 01       	movw	r30, r24
     95c:	11 86       	std	Z+9, r1	; 0x09
     95e:	28 e6       	ldi	r18, 0x68	; 104
     960:	33 e0       	ldi	r19, 0x03	; 3
     962:	30 87       	std	Z+8, r19	; 0x08
     964:	27 83       	std	Z+7, r18	; 0x07
     966:	0c 94 9a 04 	jmp	0x934	; 0x934 <_ZN7MCP_CAN7init_CSEh>

0000096a <_ZN7MCP_CAN5beginEhh>:
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	00 d0       	rcall	.+0      	; 0x970 <_ZN7MCP_CAN5beginEhh+0x6>
     970:	00 d0       	rcall	.+0      	; 0x972 <_ZN7MCP_CAN5beginEhh+0x8>
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	4c 83       	std	Y+4, r20	; 0x04
     978:	6b 83       	std	Y+3, r22	; 0x03
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	0e 94 20 01 	call	0x240	; 0x240 <_ZN8SPIClass5beginEv>
     982:	4c 81       	ldd	r20, Y+4	; 0x04
     984:	6b 81       	ldd	r22, Y+3	; 0x03
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	9a 81       	ldd	r25, Y+2	; 0x02
     98a:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN7MCP_CAN12mcp2515_initEhh>
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	81 11       	cpse	r24, r1
     992:	01 c0       	rjmp	.+2      	; 0x996 <_ZN7MCP_CAN5beginEhh+0x2c>
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	89 2f       	mov	r24, r25
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_>:
     9a6:	6f 92       	push	r6
     9a8:	7f 92       	push	r7
     9aa:	8f 92       	push	r8
     9ac:	9f 92       	push	r9
     9ae:	af 92       	push	r10
     9b0:	bf 92       	push	r11
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	ec 01       	movw	r28, r24
     9c4:	5a 01       	movw	r10, r20
     9c6:	49 01       	movw	r8, r18
     9c8:	38 01       	movw	r6, r16
     9ca:	60 ff       	sbrs	r22, 0
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x2c>
     9ce:	60 e9       	ldi	r22, 0x90	; 144
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x32>
     9d2:	61 ff       	sbrs	r22, 1
     9d4:	15 c0       	rjmp	.+42     	; 0xa00 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x5a>
     9d6:	64 e9       	ldi	r22, 0x94	; 148
     9d8:	ce 01       	movw	r24, r28
     9da:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_>
     9de:	f3 01       	movw	r30, r6
     9e0:	80 81       	ld	r24, Z
     9e2:	8d 83       	std	Y+5, r24	; 0x05
     9e4:	f4 01       	movw	r30, r8
     9e6:	80 81       	ld	r24, Z
     9e8:	88 83       	st	Y, r24
     9ea:	f5 01       	movw	r30, r10
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	a2 81       	ldd	r26, Z+2	; 0x02
     9f2:	b3 81       	ldd	r27, Z+3	; 0x03
     9f4:	89 83       	std	Y+1, r24	; 0x01
     9f6:	9a 83       	std	Y+2, r25	; 0x02
     9f8:	ab 83       	std	Y+3, r26	; 0x03
     9fa:	bc 83       	std	Y+4, r27	; 0x04
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x60>
     a00:	f7 01       	movw	r30, r14
     a02:	10 82       	st	Z, r1
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	bf 90       	pop	r11
     a18:	af 90       	pop	r10
     a1a:	9f 90       	pop	r9
     a1c:	8f 90       	pop	r8
     a1e:	7f 90       	pop	r7
     a20:	6f 90       	pop	r6
     a22:	08 95       	ret

00000a24 <_ZN7MCP_CAN14readRxTxStatusEv>:
     a24:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN7MCP_CAN18mcp2515_readStatusEv>
     a28:	98 2f       	mov	r25, r24
     a2a:	9b 7a       	andi	r25, 0xAB	; 171
     a2c:	83 fd       	sbrc	r24, 3
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <_ZN7MCP_CAN14readRxTxStatusEv+0x10>
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	01 c0       	rjmp	.+2      	; 0xa36 <_ZN7MCP_CAN14readRxTxStatusEv+0x12>
     a34:	34 e0       	ldi	r19, 0x04	; 4
     a36:	85 fd       	sbrc	r24, 5
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <_ZN7MCP_CAN14readRxTxStatusEv+0x1a>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <_ZN7MCP_CAN14readRxTxStatusEv+0x1c>
     a3e:	28 e0       	ldi	r18, 0x08	; 8
     a40:	89 2f       	mov	r24, r25
     a42:	88 1f       	adc	r24, r24
     a44:	88 27       	eor	r24, r24
     a46:	88 1f       	adc	r24, r24
     a48:	82 95       	swap	r24
     a4a:	80 7f       	andi	r24, 0xF0	; 240
     a4c:	93 70       	andi	r25, 0x03	; 3
     a4e:	93 2b       	or	r25, r19
     a50:	92 2b       	or	r25, r18
     a52:	89 2b       	or	r24, r25
     a54:	08 95       	ret

00000a56 <_ZN7MCP_CAN10readMsgBufEPhS0_>:
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	ec 01       	movw	r28, r24
     a68:	7b 01       	movw	r14, r22
     a6a:	6a 01       	movw	r12, r20
     a6c:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN7MCP_CAN14readRxTxStatusEv>
     a70:	8e 01       	movw	r16, r28
     a72:	0b 5f       	subi	r16, 0xFB	; 251
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	ae 01       	movw	r20, r28
     a78:	4f 5f       	subi	r20, 0xFF	; 255
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
     a7c:	9e 01       	movw	r18, r28
     a7e:	68 2f       	mov	r22, r24
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_>
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	08 95       	ret

00000a98 <_ZN7MCP_CAN12checkReceiveEv>:
     a98:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN7MCP_CAN18mcp2515_readStatusEv>
     a9c:	83 70       	andi	r24, 0x03	; 3
     a9e:	11 f4       	brne	.+4      	; 0xaa4 <_ZN7MCP_CAN12checkReceiveEv+0xc>
     aa0:	84 e0       	ldi	r24, 0x04	; 4
     aa2:	08 95       	ret
     aa4:	83 e0       	ldi	r24, 0x03	; 3
     aa6:	08 95       	ret

00000aa8 <_ZN7MCP_CAN8getCanIdEv>:
     aa8:	fc 01       	movw	r30, r24
     aaa:	61 81       	ldd	r22, Z+1	; 0x01
     aac:	72 81       	ldd	r23, Z+2	; 0x02
     aae:	83 81       	ldd	r24, Z+3	; 0x03
     ab0:	94 81       	ldd	r25, Z+4	; 0x04
     ab2:	08 95       	ret

00000ab4 <FuncTaskL1>:
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	29 97       	sbiw	r28, 0x09	; 9
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <isr_cnt>
     ad8:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <isr_cnt+0x1>
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <isr_cnt+0x1>
     ae2:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <isr_cnt>
     ae6:	19 86       	std	Y+9, r1	; 0x09
     ae8:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <isr_cnt>
     aec:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <isr_cnt+0x1>
     af0:	88 3e       	cpi	r24, 0xE8	; 232
     af2:	93 40       	sbci	r25, 0x03	; 3
     af4:	08 f4       	brcc	.+2      	; 0xaf8 <FuncTaskL1+0x44>
     af6:	4c c0       	rjmp	.+152    	; 0xb90 <FuncTaskL1+0xdc>
     af8:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <isr_cnt+0x1>
     afc:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <isr_cnt>
     b00:	88 e7       	ldi	r24, 0x78	; 120
     b02:	93 e0       	ldi	r25, 0x03	; 3
     b04:	0e 94 4c 05 	call	0xa98	; 0xa98 <_ZN7MCP_CAN12checkReceiveEv>
     b08:	83 30       	cpi	r24, 0x03	; 3
     b0a:	09 f0       	breq	.+2      	; 0xb0e <FuncTaskL1+0x5a>
     b0c:	41 c0       	rjmp	.+130    	; 0xb90 <FuncTaskL1+0xdc>
     b0e:	8e 01       	movw	r16, r28
     b10:	0f 5f       	subi	r16, 0xFF	; 255
     b12:	1f 4f       	sbci	r17, 0xFF	; 255
     b14:	a8 01       	movw	r20, r16
     b16:	be 01       	movw	r22, r28
     b18:	67 5f       	subi	r22, 0xF7	; 247
     b1a:	7f 4f       	sbci	r23, 0xFF	; 255
     b1c:	88 e7       	ldi	r24, 0x78	; 120
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN7MCP_CAN10readMsgBufEPhS0_>
     b24:	88 e7       	ldi	r24, 0x78	; 120
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN7MCP_CAN8getCanIdEv>
     b2c:	6b 01       	movw	r12, r22
     b2e:	7c 01       	movw	r14, r24
     b30:	69 e0       	ldi	r22, 0x09	; 9
     b32:	73 e0       	ldi	r23, 0x03	; 3
     b34:	81 e9       	ldi	r24, 0x91	; 145
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN5Print7printlnEPKc>
     b3c:	67 e2       	ldi	r22, 0x27	; 39
     b3e:	73 e0       	ldi	r23, 0x03	; 3
     b40:	81 e9       	ldi	r24, 0x91	; 145
     b42:	93 e0       	ldi	r25, 0x03	; 3
     b44:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN5Print5printEPKc>
     b48:	40 e1       	ldi	r20, 0x10	; 16
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	b6 01       	movw	r22, r12
     b4e:	81 e9       	ldi	r24, 0x91	; 145
     b50:	93 e0       	ldi	r25, 0x03	; 3
     b52:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN5Print7printlnEji>
     b56:	78 01       	movw	r14, r16
     b58:	89 85       	ldd	r24, Y+9	; 0x09
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	97 01       	movw	r18, r14
     b5e:	20 1b       	sub	r18, r16
     b60:	31 0b       	sbc	r19, r17
     b62:	28 17       	cp	r18, r24
     b64:	39 07       	cpc	r19, r25
     b66:	84 f4       	brge	.+32     	; 0xb88 <FuncTaskL1+0xd4>
     b68:	f7 01       	movw	r30, r14
     b6a:	61 91       	ld	r22, Z+
     b6c:	7f 01       	movw	r14, r30
     b6e:	40 e1       	ldi	r20, 0x10	; 16
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	81 e9       	ldi	r24, 0x91	; 145
     b74:	93 e0       	ldi	r25, 0x03	; 3
     b76:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN5Print5printEhi>
     b7a:	6a e3       	ldi	r22, 0x3A	; 58
     b7c:	73 e0       	ldi	r23, 0x03	; 3
     b7e:	81 e9       	ldi	r24, 0x91	; 145
     b80:	93 e0       	ldi	r25, 0x03	; 3
     b82:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN5Print5printEPKc>
     b86:	e8 cf       	rjmp	.-48     	; 0xb58 <FuncTaskL1+0xa4>
     b88:	81 e9       	ldi	r24, 0x91	; 145
     b8a:	93 e0       	ldi	r25, 0x03	; 3
     b8c:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN5Print7printlnEv>
     b90:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <TaskL1_count>
     b94:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <TaskL1_count+0x1>
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <TaskL1_count+0x1>
     b9e:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <TaskL1_count>
     ba2:	0e 94 85 0a 	call	0x150a	; 0x150a <TerminateTask>
     ba6:	29 96       	adiw	r28, 0x09	; 9
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	df 90       	pop	r13
     bc0:	cf 90       	pop	r12
     bc2:	08 95       	ret

00000bc4 <_GLOBAL__sub_I_TaskL1_count>:
     bc4:	6a e0       	ldi	r22, 0x0A	; 10
     bc6:	88 e7       	ldi	r24, 0x78	; 120
     bc8:	93 e0       	ldi	r25, 0x03	; 3
     bca:	0c 94 ad 04 	jmp	0x95a	; 0x95a <_ZN7MCP_CANC1Eh>

00000bce <FuncTaskL2>:
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	49 e0       	ldi	r20, 0x09	; 9
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	6c e3       	ldi	r22, 0x3C	; 60
     bd8:	73 e0       	ldi	r23, 0x03	; 3
     bda:	81 e9       	ldi	r24, 0x91	; 145
     bdc:	93 e0       	ldi	r25, 0x03	; 3
     bde:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print5writeEPKhj>
     be2:	c0 e0       	ldi	r28, 0x00	; 0
     be4:	d1 e0       	ldi	r29, 0x01	; 1
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	88 81       	ld	r24, Y
     bea:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     bee:	68 ee       	ldi	r22, 0xE8	; 232
     bf0:	73 e0       	ldi	r23, 0x03	; 3
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 83 06 	call	0xd06	; 0xd06 <delay>
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	88 81       	ld	r24, Y
     bfe:	0e 94 5f 07 	call	0xebe	; 0xebe <digitalWrite>
     c02:	68 ee       	ldi	r22, 0xE8	; 232
     c04:	73 e0       	ldi	r23, 0x03	; 3
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 83 06 	call	0xd06	; 0xd06 <delay>
     c0e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <TaskL2_count>
     c12:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <TaskL2_count+0x1>
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <TaskL2_count+0x1>
     c1c:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <TaskL2_count>
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	0c 94 85 0a 	jmp	0x150a	; 0x150a <TerminateTask>

00000c28 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
     c3e:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <timer0_millis>
     c42:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <timer0_millis+0x1>
     c46:	a0 91 8b 03 	lds	r26, 0x038B	; 0x80038b <timer0_millis+0x2>
     c4a:	b0 91 8c 03 	lds	r27, 0x038C	; 0x80038c <timer0_millis+0x3>
     c4e:	30 91 88 03 	lds	r19, 0x0388	; 0x800388 <timer0_fract>
     c52:	23 e0       	ldi	r18, 0x03	; 3
     c54:	23 0f       	add	r18, r19
     c56:	2d 37       	cpi	r18, 0x7D	; 125
     c58:	20 f4       	brcc	.+8      	; 0xc62 <__vector_16+0x3a>
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	a1 1d       	adc	r26, r1
     c5e:	b1 1d       	adc	r27, r1
     c60:	05 c0       	rjmp	.+10     	; 0xc6c <__vector_16+0x44>
     c62:	26 e8       	ldi	r18, 0x86	; 134
     c64:	23 0f       	add	r18, r19
     c66:	02 96       	adiw	r24, 0x02	; 2
     c68:	a1 1d       	adc	r26, r1
     c6a:	b1 1d       	adc	r27, r1
     c6c:	20 93 88 03 	sts	0x0388, r18	; 0x800388 <timer0_fract>
     c70:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <timer0_millis>
     c74:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <timer0_millis+0x1>
     c78:	a0 93 8b 03 	sts	0x038B, r26	; 0x80038b <timer0_millis+0x2>
     c7c:	b0 93 8c 03 	sts	0x038C, r27	; 0x80038c <timer0_millis+0x3>
     c80:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <timer0_overflow_count>
     c84:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <timer0_overflow_count+0x1>
     c88:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <timer0_overflow_count+0x2>
     c8c:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <timer0_overflow_count+0x3>
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	a1 1d       	adc	r26, r1
     c94:	b1 1d       	adc	r27, r1
     c96:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <timer0_overflow_count>
     c9a:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <timer0_overflow_count+0x1>
     c9e:	a0 93 8f 03 	sts	0x038F, r26	; 0x80038f <timer0_overflow_count+0x2>
     ca2:	b0 93 90 03 	sts	0x0390, r27	; 0x800390 <timer0_overflow_count+0x3>
     ca6:	bf 91       	pop	r27
     ca8:	af 91       	pop	r26
     caa:	9f 91       	pop	r25
     cac:	8f 91       	pop	r24
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	0f 90       	pop	r0
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	0f 90       	pop	r0
     cb8:	1f 90       	pop	r1
     cba:	18 95       	reti

00000cbc <micros>:
     cbc:	3f b7       	in	r19, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <timer0_overflow_count>
     cc4:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <timer0_overflow_count+0x1>
     cc8:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <timer0_overflow_count+0x2>
     ccc:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <timer0_overflow_count+0x3>
     cd0:	26 b5       	in	r18, 0x26	; 38
     cd2:	a8 9b       	sbis	0x15, 0	; 21
     cd4:	05 c0       	rjmp	.+10     	; 0xce0 <micros+0x24>
     cd6:	2f 3f       	cpi	r18, 0xFF	; 255
     cd8:	19 f0       	breq	.+6      	; 0xce0 <micros+0x24>
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	a1 1d       	adc	r26, r1
     cde:	b1 1d       	adc	r27, r1
     ce0:	3f bf       	out	0x3f, r19	; 63
     ce2:	ba 2f       	mov	r27, r26
     ce4:	a9 2f       	mov	r26, r25
     ce6:	98 2f       	mov	r25, r24
     ce8:	88 27       	eor	r24, r24
     cea:	82 0f       	add	r24, r18
     cec:	91 1d       	adc	r25, r1
     cee:	a1 1d       	adc	r26, r1
     cf0:	b1 1d       	adc	r27, r1
     cf2:	bc 01       	movw	r22, r24
     cf4:	cd 01       	movw	r24, r26
     cf6:	42 e0       	ldi	r20, 0x02	; 2
     cf8:	66 0f       	add	r22, r22
     cfa:	77 1f       	adc	r23, r23
     cfc:	88 1f       	adc	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	4a 95       	dec	r20
     d02:	d1 f7       	brne	.-12     	; 0xcf8 <micros+0x3c>
     d04:	08 95       	ret

00000d06 <delay>:
     d06:	8f 92       	push	r8
     d08:	9f 92       	push	r9
     d0a:	af 92       	push	r10
     d0c:	bf 92       	push	r11
     d0e:	cf 92       	push	r12
     d10:	df 92       	push	r13
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	6b 01       	movw	r12, r22
     d18:	7c 01       	movw	r14, r24
     d1a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <micros>
     d1e:	4b 01       	movw	r8, r22
     d20:	5c 01       	movw	r10, r24
     d22:	c1 14       	cp	r12, r1
     d24:	d1 04       	cpc	r13, r1
     d26:	e1 04       	cpc	r14, r1
     d28:	f1 04       	cpc	r15, r1
     d2a:	01 f1       	breq	.+64     	; 0xd6c <delay+0x66>
     d2c:	0e 94 23 0a 	call	0x1446	; 0x1446 <yield>
     d30:	0e 94 5e 06 	call	0xcbc	; 0xcbc <micros>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	88 19       	sub	r24, r8
     d3a:	99 09       	sbc	r25, r9
     d3c:	aa 09       	sbc	r26, r10
     d3e:	bb 09       	sbc	r27, r11
     d40:	88 3e       	cpi	r24, 0xE8	; 232
     d42:	93 40       	sbci	r25, 0x03	; 3
     d44:	a1 05       	cpc	r26, r1
     d46:	b1 05       	cpc	r27, r1
     d48:	60 f3       	brcs	.-40     	; 0xd22 <delay+0x1c>
     d4a:	21 e0       	ldi	r18, 0x01	; 1
     d4c:	c2 1a       	sub	r12, r18
     d4e:	d1 08       	sbc	r13, r1
     d50:	e1 08       	sbc	r14, r1
     d52:	f1 08       	sbc	r15, r1
     d54:	88 ee       	ldi	r24, 0xE8	; 232
     d56:	88 0e       	add	r8, r24
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	98 1e       	adc	r9, r24
     d5c:	a1 1c       	adc	r10, r1
     d5e:	b1 1c       	adc	r11, r1
     d60:	c1 14       	cp	r12, r1
     d62:	d1 04       	cpc	r13, r1
     d64:	e1 04       	cpc	r14, r1
     d66:	f1 04       	cpc	r15, r1
     d68:	19 f7       	brne	.-58     	; 0xd30 <delay+0x2a>
     d6a:	db cf       	rjmp	.-74     	; 0xd22 <delay+0x1c>
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	bf 90       	pop	r11
     d76:	af 90       	pop	r10
     d78:	9f 90       	pop	r9
     d7a:	8f 90       	pop	r8
     d7c:	08 95       	ret

00000d7e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     d7e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     d80:	84 b5       	in	r24, 0x24	; 36
     d82:	82 60       	ori	r24, 0x02	; 2
     d84:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     d86:	84 b5       	in	r24, 0x24	; 36
     d88:	81 60       	ori	r24, 0x01	; 1
     d8a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     d8c:	85 b5       	in	r24, 0x25	; 37
     d8e:	82 60       	ori	r24, 0x02	; 2
     d90:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     d92:	85 b5       	in	r24, 0x25	; 37
     d94:	81 60       	ori	r24, 0x01	; 1
     d96:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     d98:	ee e6       	ldi	r30, 0x6E	; 110
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	81 60       	ori	r24, 0x01	; 1
     da0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     da2:	e1 e8       	ldi	r30, 0x81	; 129
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     da8:	80 81       	ld	r24, Z
     daa:	82 60       	ori	r24, 0x02	; 2
     dac:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     dae:	80 81       	ld	r24, Z
     db0:	81 60       	ori	r24, 0x01	; 1
     db2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     db4:	e0 e8       	ldi	r30, 0x80	; 128
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	81 60       	ori	r24, 0x01	; 1
     dbc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     dbe:	e1 eb       	ldi	r30, 0xB1	; 177
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	84 60       	ori	r24, 0x04	; 4
     dc6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     dc8:	e0 eb       	ldi	r30, 0xB0	; 176
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	81 60       	ori	r24, 0x01	; 1
     dd0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     dd2:	ea e7       	ldi	r30, 0x7A	; 122
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	84 60       	ori	r24, 0x04	; 4
     dda:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     ddc:	80 81       	ld	r24, Z
     dde:	82 60       	ori	r24, 0x02	; 2
     de0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     de2:	80 81       	ld	r24, Z
     de4:	81 60       	ori	r24, 0x01	; 1
     de6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     de8:	80 81       	ld	r24, Z
     dea:	80 68       	ori	r24, 0x80	; 128
     dec:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     dee:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     df2:	08 95       	ret

00000df4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	81 f0       	breq	.+32     	; 0xe18 <turnOffPWM+0x24>
     df8:	28 f4       	brcc	.+10     	; 0xe04 <turnOffPWM+0x10>
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	99 f0       	breq	.+38     	; 0xe24 <turnOffPWM+0x30>
     dfe:	82 30       	cpi	r24, 0x02	; 2
     e00:	a1 f0       	breq	.+40     	; 0xe2a <turnOffPWM+0x36>
     e02:	08 95       	ret
     e04:	87 30       	cpi	r24, 0x07	; 7
     e06:	a9 f0       	breq	.+42     	; 0xe32 <turnOffPWM+0x3e>
     e08:	88 30       	cpi	r24, 0x08	; 8
     e0a:	b9 f0       	breq	.+46     	; 0xe3a <turnOffPWM+0x46>
     e0c:	84 30       	cpi	r24, 0x04	; 4
     e0e:	d1 f4       	brne	.+52     	; 0xe44 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     e10:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e14:	8f 7d       	andi	r24, 0xDF	; 223
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     e18:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e1c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     e1e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e22:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     e24:	84 b5       	in	r24, 0x24	; 36
     e26:	8f 77       	andi	r24, 0x7F	; 127
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     e2a:	84 b5       	in	r24, 0x24	; 36
     e2c:	8f 7d       	andi	r24, 0xDF	; 223
     e2e:	84 bd       	out	0x24, r24	; 36
     e30:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     e32:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e36:	8f 77       	andi	r24, 0x7F	; 127
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     e3a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e3e:	8f 7d       	andi	r24, 0xDF	; 223
     e40:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e44:	08 95       	ret

00000e46 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	fc 01       	movw	r30, r24
     e4e:	ec 53       	subi	r30, 0x3C	; 60
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     e54:	fc 01       	movw	r30, r24
     e56:	e8 52       	subi	r30, 0x28	; 40
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     e5c:	88 23       	and	r24, r24
     e5e:	61 f1       	breq	.+88     	; 0xeb8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	fc 01       	movw	r30, r24
     e68:	ea 50       	subi	r30, 0x0A	; 10
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	c5 91       	lpm	r28, Z+
     e6e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     e70:	fc 01       	movw	r30, r24
     e72:	e4 51       	subi	r30, 0x14	; 20
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	a5 91       	lpm	r26, Z+
     e78:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     e7a:	61 11       	cpse	r22, r1
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     e7e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e80:	f8 94       	cli
		*reg &= ~bit;
     e82:	88 81       	ld	r24, Y
     e84:	20 95       	com	r18
     e86:	82 23       	and	r24, r18
     e88:	88 83       	st	Y, r24
		*out &= ~bit;
     e8a:	ec 91       	ld	r30, X
     e8c:	2e 23       	and	r18, r30
     e8e:	0b c0       	rjmp	.+22     	; 0xea6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     e90:	62 30       	cpi	r22, 0x02	; 2
     e92:	61 f4       	brne	.+24     	; 0xeac <pinMode+0x66>
		uint8_t oldSREG = SREG;
     e94:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e96:	f8 94       	cli
		*reg &= ~bit;
     e98:	38 81       	ld	r19, Y
     e9a:	82 2f       	mov	r24, r18
     e9c:	80 95       	com	r24
     e9e:	83 23       	and	r24, r19
     ea0:	88 83       	st	Y, r24
		*out |= bit;
     ea2:	ec 91       	ld	r30, X
     ea4:	2e 2b       	or	r18, r30
     ea6:	2c 93       	st	X, r18
		SREG = oldSREG;
     ea8:	9f bf       	out	0x3f, r25	; 63
     eaa:	06 c0       	rjmp	.+12     	; 0xeb8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     eac:	8f b7       	in	r24, 0x3f	; 63
                cli();
     eae:	f8 94       	cli
		*reg |= bit;
     eb0:	e8 81       	ld	r30, Y
     eb2:	2e 2b       	or	r18, r30
     eb4:	28 83       	st	Y, r18
		SREG = oldSREG;
     eb6:	8f bf       	out	0x3f, r24	; 63
	}
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret

00000ebe <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	f9 01       	movw	r30, r18
     eca:	e0 55       	subi	r30, 0x50	; 80
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     ed0:	f9 01       	movw	r30, r18
     ed2:	ec 53       	subi	r30, 0x3C	; 60
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     ed8:	f9 01       	movw	r30, r18
     eda:	e8 52       	subi	r30, 0x28	; 40
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     ee0:	cc 23       	and	r28, r28
     ee2:	c9 f0       	breq	.+50     	; 0xf16 <digitalWrite+0x58>
     ee4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     ee6:	81 11       	cpse	r24, r1
     ee8:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <turnOffPWM>

	out = portOutputRegister(port);
     eec:	ec 2f       	mov	r30, r28
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	e4 51       	subi	r30, 0x14	; 20
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	a5 91       	lpm	r26, Z+
     efa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     efc:	8f b7       	in	r24, 0x3f	; 63
	cli();
     efe:	f8 94       	cli

	if (val == LOW) {
     f00:	11 11       	cpse	r17, r1
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <digitalWrite+0x50>
		*out &= ~bit;
     f04:	9c 91       	ld	r25, X
     f06:	ed 2f       	mov	r30, r29
     f08:	e0 95       	com	r30
     f0a:	e9 23       	and	r30, r25
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <digitalWrite+0x54>
	} else {
		*out |= bit;
     f0e:	ec 91       	ld	r30, X
     f10:	ed 2b       	or	r30, r29
     f12:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     f14:	8f bf       	out	0x3f, r24	; 63
}
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	08 95       	ret

00000f1e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     f1e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     f20:	91 8d       	ldd	r25, Z+25	; 0x19
     f22:	22 8d       	ldd	r18, Z+26	; 0x1a
     f24:	89 2f       	mov	r24, r25
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	80 5c       	subi	r24, 0xC0	; 192
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	82 1b       	sub	r24, r18
     f2e:	91 09       	sbc	r25, r1
}
     f30:	8f 73       	andi	r24, 0x3F	; 63
     f32:	99 27       	eor	r25, r25
     f34:	08 95       	ret

00000f36 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     f36:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     f38:	91 8d       	ldd	r25, Z+25	; 0x19
     f3a:	82 8d       	ldd	r24, Z+26	; 0x1a
     f3c:	98 17       	cp	r25, r24
     f3e:	31 f0       	breq	.+12     	; 0xf4c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     f40:	82 8d       	ldd	r24, Z+26	; 0x1a
     f42:	e8 0f       	add	r30, r24
     f44:	f1 1d       	adc	r31, r1
     f46:	85 8d       	ldd	r24, Z+29	; 0x1d
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     f50:	08 95       	ret

00000f52 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     f52:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     f54:	91 8d       	ldd	r25, Z+25	; 0x19
     f56:	82 8d       	ldd	r24, Z+26	; 0x1a
     f58:	98 17       	cp	r25, r24
     f5a:	61 f0       	breq	.+24     	; 0xf74 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     f5c:	82 8d       	ldd	r24, Z+26	; 0x1a
     f5e:	df 01       	movw	r26, r30
     f60:	a8 0f       	add	r26, r24
     f62:	b1 1d       	adc	r27, r1
     f64:	5d 96       	adiw	r26, 0x1d	; 29
     f66:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     f68:	92 8d       	ldd	r25, Z+26	; 0x1a
     f6a:	9f 5f       	subi	r25, 0xFF	; 255
     f6c:	9f 73       	andi	r25, 0x3F	; 63
     f6e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     f78:	08 95       	ret

00000f7a <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     f7a:	fc 01       	movw	r30, r24
     f7c:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     f7e:	44 8d       	ldd	r20, Z+28	; 0x1c
     f80:	25 2f       	mov	r18, r21
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	84 2f       	mov	r24, r20
     f86:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     f88:	82 1b       	sub	r24, r18
     f8a:	93 0b       	sbc	r25, r19
     f8c:	54 17       	cp	r21, r20
     f8e:	10 f0       	brcs	.+4      	; 0xf94 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     f90:	cf 96       	adiw	r24, 0x3f	; 63
     f92:	08 95       	ret
  return tail - head - 1;
     f94:	01 97       	sbiw	r24, 0x01	; 1
}
     f96:	08 95       	ret

00000f98 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     f98:	81 e2       	ldi	r24, 0x21	; 33
     f9a:	99 e0       	ldi	r25, 0x09	; 9
     f9c:	89 2b       	or	r24, r25
     f9e:	49 f0       	breq	.+18     	; 0xfb2 <_Z14serialEventRunv+0x1a>
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	89 2b       	or	r24, r25
     fa6:	29 f0       	breq	.+10     	; 0xfb2 <_Z14serialEventRunv+0x1a>
     fa8:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z17Serial0_availablev>
     fac:	81 11       	cpse	r24, r1
     fae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     fb2:	08 95       	ret

00000fb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     fb4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     fb6:	84 8d       	ldd	r24, Z+28	; 0x1c
     fb8:	df 01       	movw	r26, r30
     fba:	a8 0f       	add	r26, r24
     fbc:	b1 1d       	adc	r27, r1
     fbe:	a3 5a       	subi	r26, 0xA3	; 163
     fc0:	bf 4f       	sbci	r27, 0xFF	; 255
     fc2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     fc4:	84 8d       	ldd	r24, Z+28	; 0x1c
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	8f 73       	andi	r24, 0x3F	; 63
     fcc:	99 27       	eor	r25, r25
     fce:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     fd0:	a6 89       	ldd	r26, Z+22	; 0x16
     fd2:	b7 89       	ldd	r27, Z+23	; 0x17
     fd4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     fd6:	a0 89       	ldd	r26, Z+16	; 0x10
     fd8:	b1 89       	ldd	r27, Z+17	; 0x11
     fda:	8c 91       	ld	r24, X
     fdc:	80 64       	ori	r24, 0x40	; 64
     fde:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     fe0:	93 8d       	ldd	r25, Z+27	; 0x1b
     fe2:	84 8d       	ldd	r24, Z+28	; 0x1c
     fe4:	98 13       	cpse	r25, r24
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     fe8:	02 88       	ldd	r0, Z+18	; 0x12
     fea:	f3 89       	ldd	r31, Z+19	; 0x13
     fec:	e0 2d       	mov	r30, r0
     fee:	80 81       	ld	r24, Z
     ff0:	8f 7d       	andi	r24, 0xDF	; 223
     ff2:	80 83       	st	Z, r24
     ff4:	08 95       	ret

00000ff6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     ffc:	88 8d       	ldd	r24, Y+24	; 0x18
     ffe:	88 23       	and	r24, r24
    1000:	c9 f0       	breq	.+50     	; 0x1034 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1002:	ea 89       	ldd	r30, Y+18	; 0x12
    1004:	fb 89       	ldd	r31, Y+19	; 0x13
    1006:	80 81       	ld	r24, Z
    1008:	85 fd       	sbrc	r24, 5
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <_ZN14HardwareSerial5flushEv+0x20>
    100c:	a8 89       	ldd	r26, Y+16	; 0x10
    100e:	b9 89       	ldd	r27, Y+17	; 0x11
    1010:	8c 91       	ld	r24, X
    1012:	86 fd       	sbrc	r24, 6
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	07 fc       	sbrc	r0, 7
    101a:	f5 cf       	rjmp	.-22     	; 0x1006 <_ZN14HardwareSerial5flushEv+0x10>
    101c:	80 81       	ld	r24, Z
    101e:	85 ff       	sbrs	r24, 5
    1020:	f2 cf       	rjmp	.-28     	; 0x1006 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1022:	a8 89       	ldd	r26, Y+16	; 0x10
    1024:	b9 89       	ldd	r27, Y+17	; 0x11
    1026:	8c 91       	ld	r24, X
    1028:	85 ff       	sbrs	r24, 5
    102a:	ed cf       	rjmp	.-38     	; 0x1006 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    102c:	ce 01       	movw	r24, r28
    102e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1032:	e7 cf       	rjmp	.-50     	; 0x1002 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	ec 01       	movw	r28, r24
  _written = true;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    104c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    104e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1050:	98 13       	cpse	r25, r24
    1052:	05 c0       	rjmp	.+10     	; 0x105e <_ZN14HardwareSerial5writeEh+0x24>
    1054:	e8 89       	ldd	r30, Y+16	; 0x10
    1056:	f9 89       	ldd	r31, Y+17	; 0x11
    1058:	80 81       	ld	r24, Z
    105a:	85 fd       	sbrc	r24, 5
    105c:	24 c0       	rjmp	.+72     	; 0x10a6 <_ZN14HardwareSerial5writeEh+0x6c>
    105e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1060:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1062:	10 e0       	ldi	r17, 0x00	; 0
    1064:	0f 5f       	subi	r16, 0xFF	; 255
    1066:	1f 4f       	sbci	r17, 0xFF	; 255
    1068:	0f 73       	andi	r16, 0x3F	; 63
    106a:	11 27       	eor	r17, r17
    106c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    106e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1070:	e8 12       	cpse	r14, r24
    1072:	0c c0       	rjmp	.+24     	; 0x108c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	07 fc       	sbrc	r0, 7
    1078:	fa cf       	rjmp	.-12     	; 0x106e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    107a:	e8 89       	ldd	r30, Y+16	; 0x10
    107c:	f9 89       	ldd	r31, Y+17	; 0x11
    107e:	80 81       	ld	r24, Z
    1080:	85 ff       	sbrs	r24, 5
    1082:	f5 cf       	rjmp	.-22     	; 0x106e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1084:	ce 01       	movw	r24, r28
    1086:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    108a:	f1 cf       	rjmp	.-30     	; 0x106e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    108c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    108e:	fe 01       	movw	r30, r28
    1090:	e8 0f       	add	r30, r24
    1092:	f1 1d       	adc	r31, r1
    1094:	e3 5a       	subi	r30, 0xA3	; 163
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    109a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    109c:	ea 89       	ldd	r30, Y+18	; 0x12
    109e:	fb 89       	ldd	r31, Y+19	; 0x13
    10a0:	80 81       	ld	r24, Z
    10a2:	80 62       	ori	r24, 0x20	; 32
    10a4:	07 c0       	rjmp	.+14     	; 0x10b4 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    10a6:	ee 89       	ldd	r30, Y+22	; 0x16
    10a8:	ff 89       	ldd	r31, Y+23	; 0x17
    10aa:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    10ac:	e8 89       	ldd	r30, Y+16	; 0x10
    10ae:	f9 89       	ldd	r31, Y+17	; 0x11
    10b0:	80 81       	ld	r24, Z
    10b2:	80 64       	ori	r24, 0x40	; 64
    10b4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	08 95       	ret

000010c8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    10c8:	cf 92       	push	r12
    10ca:	df 92       	push	r13
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	ec 01       	movw	r28, r24
    10d8:	6a 01       	movw	r12, r20
    10da:	7b 01       	movw	r14, r22
    10dc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    10de:	e8 89       	ldd	r30, Y+16	; 0x10
    10e0:	f9 89       	ldd	r31, Y+17	; 0x11
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    10e6:	41 15       	cp	r20, r1
    10e8:	51 4e       	sbci	r21, 0xE1	; 225
    10ea:	61 05       	cpc	r22, r1
    10ec:	71 05       	cpc	r23, r1
    10ee:	b1 f0       	breq	.+44     	; 0x111c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	79 e0       	ldi	r23, 0x09	; 9
    10f4:	8d e3       	ldi	r24, 0x3D	; 61
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	a7 01       	movw	r20, r14
    10fa:	96 01       	movw	r18, r12
    10fc:	0e 94 ef 0c 	call	0x19de	; 0x19de <__udivmodsi4>
    1100:	da 01       	movw	r26, r20
    1102:	c9 01       	movw	r24, r18
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	a1 09       	sbc	r26, r1
    1108:	b1 09       	sbc	r27, r1
    110a:	b6 95       	lsr	r27
    110c:	a7 95       	ror	r26
    110e:	97 95       	ror	r25
    1110:	87 95       	ror	r24
    1112:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1114:	41 15       	cp	r20, r1
    1116:	80 e1       	ldi	r24, 0x10	; 16
    1118:	58 07       	cpc	r21, r24
    111a:	a8 f0       	brcs	.+42     	; 0x1146 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    111c:	e8 89       	ldd	r30, Y+16	; 0x10
    111e:	f9 89       	ldd	r31, Y+17	; 0x11
    1120:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1122:	60 e8       	ldi	r22, 0x80	; 128
    1124:	74 e8       	ldi	r23, 0x84	; 132
    1126:	8e e1       	ldi	r24, 0x1E	; 30
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a7 01       	movw	r20, r14
    112c:	96 01       	movw	r18, r12
    112e:	0e 94 ef 0c 	call	0x19de	; 0x19de <__udivmodsi4>
    1132:	ba 01       	movw	r22, r20
    1134:	a9 01       	movw	r20, r18
    1136:	41 50       	subi	r20, 0x01	; 1
    1138:	51 09       	sbc	r21, r1
    113a:	61 09       	sbc	r22, r1
    113c:	71 09       	sbc	r23, r1
    113e:	76 95       	lsr	r23
    1140:	67 95       	ror	r22
    1142:	57 95       	ror	r21
    1144:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1146:	ec 85       	ldd	r30, Y+12	; 0x0c
    1148:	fd 85       	ldd	r31, Y+13	; 0x0d
    114a:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    114c:	ee 85       	ldd	r30, Y+14	; 0x0e
    114e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1150:	40 83       	st	Z, r20

  _written = false;
    1152:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1154:	ec 89       	ldd	r30, Y+20	; 0x14
    1156:	fd 89       	ldd	r31, Y+21	; 0x15
    1158:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    115a:	ea 89       	ldd	r30, Y+18	; 0x12
    115c:	fb 89       	ldd	r31, Y+19	; 0x13
    115e:	80 81       	ld	r24, Z
    1160:	80 61       	ori	r24, 0x10	; 16
    1162:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1164:	ea 89       	ldd	r30, Y+18	; 0x12
    1166:	fb 89       	ldd	r31, Y+19	; 0x13
    1168:	80 81       	ld	r24, Z
    116a:	88 60       	ori	r24, 0x08	; 8
    116c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    116e:	ea 89       	ldd	r30, Y+18	; 0x12
    1170:	fb 89       	ldd	r31, Y+19	; 0x13
    1172:	80 81       	ld	r24, Z
    1174:	80 68       	ori	r24, 0x80	; 128
    1176:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1178:	ea 89       	ldd	r30, Y+18	; 0x12
    117a:	fb 89       	ldd	r31, Y+19	; 0x13
    117c:	80 81       	ld	r24, Z
    117e:	8f 7d       	andi	r24, 0xDF	; 223
    1180:	80 83       	st	Z, r24
}
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	08 95       	ret

00001192 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	2f 93       	push	r18
    119e:	8f 93       	push	r24
    11a0:	9f 93       	push	r25
    11a2:	ef 93       	push	r30
    11a4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    11a6:	e0 91 a1 03 	lds	r30, 0x03A1	; 0x8003a1 <Serial+0x10>
    11aa:	f0 91 a2 03 	lds	r31, 0x03A2	; 0x8003a2 <Serial+0x11>
    11ae:	80 81       	ld	r24, Z
    11b0:	e0 91 a7 03 	lds	r30, 0x03A7	; 0x8003a7 <Serial+0x16>
    11b4:	f0 91 a8 03 	lds	r31, 0x03A8	; 0x8003a8 <Serial+0x17>
    11b8:	82 fd       	sbrc	r24, 2
    11ba:	12 c0       	rjmp	.+36     	; 0x11e0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    11bc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    11be:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <Serial+0x19>
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    11c6:	20 91 ab 03 	lds	r18, 0x03AB	; 0x8003ab <Serial+0x1a>
    11ca:	82 17       	cp	r24, r18
    11cc:	51 f0       	breq	.+20     	; 0x11e2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    11ce:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <Serial+0x19>
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	ef 56       	subi	r30, 0x6F	; 111
    11d6:	fc 4f       	sbci	r31, 0xFC	; 252
    11d8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    11da:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <Serial+0x19>
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    11e0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    11e2:	ff 91       	pop	r31
    11e4:	ef 91       	pop	r30
    11e6:	9f 91       	pop	r25
    11e8:	8f 91       	pop	r24
    11ea:	2f 91       	pop	r18
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	0f 90       	pop	r0
    11f2:	1f 90       	pop	r1
    11f4:	18 95       	reti

000011f6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    11f6:	1f 92       	push	r1
    11f8:	0f 92       	push	r0
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	0f 92       	push	r0
    11fe:	11 24       	eor	r1, r1
    1200:	2f 93       	push	r18
    1202:	3f 93       	push	r19
    1204:	4f 93       	push	r20
    1206:	5f 93       	push	r21
    1208:	6f 93       	push	r22
    120a:	7f 93       	push	r23
    120c:	8f 93       	push	r24
    120e:	9f 93       	push	r25
    1210:	af 93       	push	r26
    1212:	bf 93       	push	r27
    1214:	ef 93       	push	r30
    1216:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1218:	81 e9       	ldi	r24, 0x91	; 145
    121a:	93 e0       	ldi	r25, 0x03	; 3
    121c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	7f 91       	pop	r23
    122e:	6f 91       	pop	r22
    1230:	5f 91       	pop	r21
    1232:	4f 91       	pop	r20
    1234:	3f 91       	pop	r19
    1236:	2f 91       	pop	r18
    1238:	0f 90       	pop	r0
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	0f 90       	pop	r0
    123e:	1f 90       	pop	r1
    1240:	18 95       	reti

00001242 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1242:	81 e9       	ldi	r24, 0x91	; 145
    1244:	93 e0       	ldi	r25, 0x03	; 3
    1246:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN14HardwareSerial9availableEv>
    124a:	21 e0       	ldi	r18, 0x01	; 1
    124c:	89 2b       	or	r24, r25
    124e:	09 f4       	brne	.+2      	; 0x1252 <_Z17Serial0_availablev+0x10>
    1250:	20 e0       	ldi	r18, 0x00	; 0
}
    1252:	82 2f       	mov	r24, r18
    1254:	08 95       	ret

00001256 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1256:	e1 e9       	ldi	r30, 0x91	; 145
    1258:	f3 e0       	ldi	r31, 0x03	; 3
    125a:	13 82       	std	Z+3, r1	; 0x03
    125c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    125e:	88 ee       	ldi	r24, 0xE8	; 232
    1260:	93 e0       	ldi	r25, 0x03	; 3
    1262:	a0 e0       	ldi	r26, 0x00	; 0
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	84 83       	std	Z+4, r24	; 0x04
    1268:	95 83       	std	Z+5, r25	; 0x05
    126a:	a6 83       	std	Z+6, r26	; 0x06
    126c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    126e:	8a e4       	ldi	r24, 0x4A	; 74
    1270:	93 e0       	ldi	r25, 0x03	; 3
    1272:	91 83       	std	Z+1, r25	; 0x01
    1274:	80 83       	st	Z, r24
    1276:	85 ec       	ldi	r24, 0xC5	; 197
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	95 87       	std	Z+13, r25	; 0x0d
    127c:	84 87       	std	Z+12, r24	; 0x0c
    127e:	84 ec       	ldi	r24, 0xC4	; 196
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	97 87       	std	Z+15, r25	; 0x0f
    1284:	86 87       	std	Z+14, r24	; 0x0e
    1286:	80 ec       	ldi	r24, 0xC0	; 192
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	91 8b       	std	Z+17, r25	; 0x11
    128c:	80 8b       	std	Z+16, r24	; 0x10
    128e:	81 ec       	ldi	r24, 0xC1	; 193
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	93 8b       	std	Z+19, r25	; 0x13
    1294:	82 8b       	std	Z+18, r24	; 0x12
    1296:	82 ec       	ldi	r24, 0xC2	; 194
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	95 8b       	std	Z+21, r25	; 0x15
    129c:	84 8b       	std	Z+20, r24	; 0x14
    129e:	86 ec       	ldi	r24, 0xC6	; 198
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	97 8b       	std	Z+23, r25	; 0x17
    12a4:	86 8b       	std	Z+22, r24	; 0x16
    12a6:	11 8e       	std	Z+25, r1	; 0x19
    12a8:	12 8e       	std	Z+26, r1	; 0x1a
    12aa:	13 8e       	std	Z+27, r1	; 0x1b
    12ac:	14 8e       	std	Z+28, r1	; 0x1c
    12ae:	08 95       	ret

000012b0 <_ZN5Print5writeEPKhj>:
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    12b0:	cf 92       	push	r12
    12b2:	df 92       	push	r13
    12b4:	ef 92       	push	r14
    12b6:	ff 92       	push	r15
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	6c 01       	movw	r12, r24
    12c2:	7a 01       	movw	r14, r20
    12c4:	8b 01       	movw	r16, r22
    12c6:	c0 e0       	ldi	r28, 0x00	; 0
    12c8:	d0 e0       	ldi	r29, 0x00	; 0
    12ca:	ce 15       	cp	r28, r14
    12cc:	df 05       	cpc	r29, r15
    12ce:	89 f0       	breq	.+34     	; 0x12f2 <_ZN5Print5writeEPKhj+0x42>
    12d0:	d8 01       	movw	r26, r16
    12d2:	6d 91       	ld	r22, X+
    12d4:	8d 01       	movw	r16, r26
    12d6:	d6 01       	movw	r26, r12
    12d8:	ed 91       	ld	r30, X+
    12da:	fc 91       	ld	r31, X
    12dc:	01 90       	ld	r0, Z+
    12de:	f0 81       	ld	r31, Z
    12e0:	e0 2d       	mov	r30, r0
    12e2:	c6 01       	movw	r24, r12
    12e4:	09 95       	icall
    12e6:	89 2b       	or	r24, r25
    12e8:	11 f4       	brne	.+4      	; 0x12ee <_ZN5Print5writeEPKhj+0x3e>
    12ea:	7e 01       	movw	r14, r28
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <_ZN5Print5writeEPKhj+0x42>
    12ee:	21 96       	adiw	r28, 0x01	; 1
    12f0:	ec cf       	rjmp	.-40     	; 0x12ca <_ZN5Print5writeEPKhj+0x1a>
    12f2:	c7 01       	movw	r24, r14
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	ff 90       	pop	r15
    12fe:	ef 90       	pop	r14
    1300:	df 90       	pop	r13
    1302:	cf 90       	pop	r12
    1304:	08 95       	ret

00001306 <_ZN5Print5writeEPKc>:
    1306:	61 15       	cp	r22, r1
    1308:	71 05       	cpc	r23, r1
    130a:	79 f0       	breq	.+30     	; 0x132a <_ZN5Print5writeEPKc+0x24>
    130c:	fb 01       	movw	r30, r22
    130e:	01 90       	ld	r0, Z+
    1310:	00 20       	and	r0, r0
    1312:	e9 f7       	brne	.-6      	; 0x130e <_ZN5Print5writeEPKc+0x8>
    1314:	31 97       	sbiw	r30, 0x01	; 1
    1316:	af 01       	movw	r20, r30
    1318:	46 1b       	sub	r20, r22
    131a:	57 0b       	sbc	r21, r23
    131c:	dc 01       	movw	r26, r24
    131e:	ed 91       	ld	r30, X+
    1320:	fc 91       	ld	r31, X
    1322:	02 80       	ldd	r0, Z+2	; 0x02
    1324:	f3 81       	ldd	r31, Z+3	; 0x03
    1326:	e0 2d       	mov	r30, r0
    1328:	09 94       	ijmp
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	08 95       	ret

00001330 <_ZN5Print5printEPKc>:
    1330:	0c 94 83 09 	jmp	0x1306	; 0x1306 <_ZN5Print5writeEPKc>

00001334 <_ZN5Print7printlnEv>:
    1334:	6d ee       	ldi	r22, 0xED	; 237
    1336:	71 e0       	ldi	r23, 0x01	; 1
    1338:	0c 94 83 09 	jmp	0x1306	; 0x1306 <_ZN5Print5writeEPKc>

0000133c <_ZN5Print7printlnEPKc>:
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	ec 01       	movw	r28, r24
    1346:	0e 94 83 09 	call	0x1306	; 0x1306 <_ZN5Print5writeEPKc>
    134a:	8c 01       	movw	r16, r24
    134c:	ce 01       	movw	r24, r28
    134e:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN5Print7printlnEv>
    1352:	80 0f       	add	r24, r16
    1354:	91 1f       	adc	r25, r17
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	08 95       	ret

00001360 <_ZN5Print11printNumberEmh>:
    1360:	4f 92       	push	r4
    1362:	5f 92       	push	r5
    1364:	6f 92       	push	r6
    1366:	7f 92       	push	r7
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	a1 97       	sbiw	r28, 0x21	; 33
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	7c 01       	movw	r14, r24
    1386:	fa 01       	movw	r30, r20
    1388:	cb 01       	movw	r24, r22
    138a:	19 a2       	std	Y+33, r1	; 0x21
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	08 f4       	brcc	.+2      	; 0x1392 <_ZN5Print11printNumberEmh+0x32>
    1390:	2a e0       	ldi	r18, 0x0A	; 10
    1392:	8e 01       	movw	r16, r28
    1394:	0f 5d       	subi	r16, 0xDF	; 223
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	42 2e       	mov	r4, r18
    139a:	51 2c       	mov	r5, r1
    139c:	61 2c       	mov	r6, r1
    139e:	71 2c       	mov	r7, r1
    13a0:	bf 01       	movw	r22, r30
    13a2:	a3 01       	movw	r20, r6
    13a4:	92 01       	movw	r18, r4
    13a6:	0e 94 ef 0c 	call	0x19de	; 0x19de <__udivmodsi4>
    13aa:	f9 01       	movw	r30, r18
    13ac:	ca 01       	movw	r24, r20
    13ae:	01 50       	subi	r16, 0x01	; 1
    13b0:	11 09       	sbc	r17, r1
    13b2:	6a 30       	cpi	r22, 0x0A	; 10
    13b4:	14 f4       	brge	.+4      	; 0x13ba <_ZN5Print11printNumberEmh+0x5a>
    13b6:	60 5d       	subi	r22, 0xD0	; 208
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <_ZN5Print11printNumberEmh+0x5c>
    13ba:	69 5c       	subi	r22, 0xC9	; 201
    13bc:	d8 01       	movw	r26, r16
    13be:	6c 93       	st	X, r22
    13c0:	23 2b       	or	r18, r19
    13c2:	24 2b       	or	r18, r20
    13c4:	25 2b       	or	r18, r21
    13c6:	61 f7       	brne	.-40     	; 0x13a0 <_ZN5Print11printNumberEmh+0x40>
    13c8:	b8 01       	movw	r22, r16
    13ca:	c7 01       	movw	r24, r14
    13cc:	0e 94 83 09 	call	0x1306	; 0x1306 <_ZN5Print5writeEPKc>
    13d0:	a1 96       	adiw	r28, 0x21	; 33
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	7f 90       	pop	r7
    13ea:	6f 90       	pop	r6
    13ec:	5f 90       	pop	r5
    13ee:	4f 90       	pop	r4
    13f0:	08 95       	ret

000013f2 <_ZN5Print5printEmi>:
    13f2:	21 15       	cp	r18, r1
    13f4:	31 05       	cpc	r19, r1
    13f6:	41 f4       	brne	.+16     	; 0x1408 <_ZN5Print5printEmi+0x16>
    13f8:	dc 01       	movw	r26, r24
    13fa:	ed 91       	ld	r30, X+
    13fc:	fc 91       	ld	r31, X
    13fe:	01 90       	ld	r0, Z+
    1400:	f0 81       	ld	r31, Z
    1402:	e0 2d       	mov	r30, r0
    1404:	64 2f       	mov	r22, r20
    1406:	09 94       	ijmp
    1408:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <_ZN5Print11printNumberEmh>

0000140c <_ZN5Print5printEhi>:
    140c:	9a 01       	movw	r18, r20
    140e:	46 2f       	mov	r20, r22
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <_ZN5Print5printEmi>

0000141a <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	ec 01       	movw	r28, r24
    1424:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1426:	ab 01       	movw	r20, r22
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_ZN5Print5printEmi>
    1430:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1432:	ce 01       	movw	r24, r28
    1434:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN5Print7printlnEv>
  return n;
}
    1438:	80 0f       	add	r24, r16
    143a:	91 1f       	adc	r25, r17
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	08 95       	ret

00001446 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1446:	08 95       	ret

00001448 <StartOS>:
    osEE_end_primitive(flags);
  }
#endif /* OSEE_HAS_ERRORHOOK */

  return ev;
}
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	00 d0       	rcall	.+0      	; 0x1452 <StartOS+0xa>
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	00 91 7e 01 	lds	r16, 0x017E	; 0x80017e <CDB>
    145a:	10 91 7f 01 	lds	r17, 0x017F	; 0x80017f <CDB+0x1>
    145e:	9f b7       	in	r25, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	f8 01       	movw	r30, r16
    1464:	20 85       	ldd	r18, Z+8	; 0x08
    1466:	31 85       	ldd	r19, Z+9	; 0x09
    1468:	23 2b       	or	r18, r19
    146a:	e9 f4       	brne	.+58     	; 0x14a6 <StartOS+0x5e>
    146c:	28 2f       	mov	r18, r24
    146e:	80 e1       	ldi	r24, 0x10	; 16
    1470:	9c e0       	ldi	r25, 0x0C	; 12
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <CDB+0x4>
    147a:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <CDB+0x5>
    147e:	22 87       	std	Z+10, r18	; 0x0a
    1480:	22 e0       	ldi	r18, 0x02	; 2
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	31 87       	std	Z+9, r19	; 0x09
    1486:	20 87       	std	Z+8, r18	; 0x08
    1488:	fc 01       	movw	r30, r24
    148a:	62 81       	ldd	r22, Z+2	; 0x02
    148c:	73 81       	ldd	r23, Z+3	; 0x03
    148e:	ab 01       	movw	r20, r22
    1490:	0e 94 f6 00 	call	0x1ec	; 0x1ec <osEE_hal_save_ctx_and_ready2stacked>
    1494:	f8 01       	movw	r30, r16
    1496:	80 85       	ldd	r24, Z+8	; 0x08
    1498:	91 85       	ldd	r25, Z+9	; 0x09
    149a:	02 97       	sbiw	r24, 0x02	; 2
    149c:	09 f4       	brne	.+2      	; 0x14a0 <StartOS+0x58>
    149e:	78 94       	sei
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <StartOS+0x64>
    14a6:	9f bf       	out	0x3f, r25	; 63
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	08 95       	ret

000014ba <ActivateTask>:
    14ba:	cf 93       	push	r28
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <KDB+0x6>
    14c2:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <KDB+0x7>
    14c6:	82 17       	cp	r24, r18
    14c8:	93 07       	cpc	r25, r19
    14ca:	d8 f4       	brcc	.+54     	; 0x1502 <ActivateTask+0x48>
    14cc:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <KDB+0x2>
    14d0:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <KDB+0x3>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	e8 0f       	add	r30, r24
    14da:	f9 1f       	adc	r31, r25
    14dc:	40 81       	ld	r20, Z
    14de:	51 81       	ldd	r21, Z+1	; 0x01
    14e0:	fa 01       	movw	r30, r20
    14e2:	87 81       	ldd	r24, Z+7	; 0x07
    14e4:	90 85       	ldd	r25, Z+8	; 0x08
    14e6:	02 97       	sbiw	r24, 0x02	; 2
    14e8:	60 f4       	brcc	.+24     	; 0x1502 <ActivateTask+0x48>
    14ea:	cf b7       	in	r28, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	21 e0       	ldi	r18, 0x01	; 1
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	6e e7       	ldi	r22, 0x7E	; 126
    14f4:	71 e0       	ldi	r23, 0x01	; 1
    14f6:	84 e7       	ldi	r24, 0x74	; 116
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	0e 94 df 0a 	call	0x15be	; 0x15be <osEE_scheduler_task_activated>
    14fe:	cf bf       	out	0x3f, r28	; 63
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <ActivateTask+0x4c>
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <TerminateTask>:
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    150a:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <CDB>
    150e:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <CDB+0x1>
    1512:	01 90       	ld	r0, Z+
    1514:	f0 81       	ld	r31, Z
    1516:	e0 2d       	mov	r30, r0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1518:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    151a:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
    151c:	64 e9       	ldi	r22, 0x94	; 148
    151e:	7a e0       	ldi	r23, 0x0A	; 10
    1520:	82 81       	ldd	r24, Z+2	; 0x02
    1522:	93 81       	ldd	r25, Z+3	; 0x03
    1524:	0e 94 16 01 	call	0x22c	; 0x22c <osEE_hal_terminate_ctx>

00001528 <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	00 d0       	rcall	.+0      	; 0x152e <osEE_scheduler_task_end+0x6>
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
    1532:	ae 01       	movw	r20, r28
    1534:	4f 5f       	subi	r20, 0xFF	; 255
    1536:	5f 4f       	sbci	r21, 0xFF	; 255
    1538:	6e e7       	ldi	r22, 0x7E	; 126
    153a:	71 e0       	ldi	r23, 0x01	; 1
    153c:	84 e7       	ldi	r24, 0x74	; 116
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	0e 94 46 0b 	call	0x168c	; 0x168c <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
    1544:	bc 01       	movw	r22, r24
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    1558:	08 95       	ret

0000155a <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    155a:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
    155c:	ec 81       	ldd	r30, Y+4	; 0x04
    155e:	fd 81       	ldd	r31, Y+5	; 0x05
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_prio < OSEE_ISR_ALL_PRIO) {
    1560:	81 81       	ldd	r24, Z+1	; 0x01
    1562:	8f 3f       	cpi	r24, 0xFF	; 255
    1564:	09 f0       	breq	.+2      	; 0x1568 <osEE_scheduler_task_wrapper_run+0xe>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
    1566:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
    1568:	e9 85       	ldd	r30, Y+9	; 0x09
    156a:	fa 85       	ldd	r31, Y+10	; 0x0a
    156c:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    156e:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1570:	f8 94       	cli
    1572:	64 e9       	ldi	r22, 0x94	; 148
    1574:	7a e0       	ldi	r23, 0x0A	; 10
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	9b 81       	ldd	r25, Y+3	; 0x03
    157a:	0e 94 16 01 	call	0x22c	; 0x22c <osEE_hal_terminate_ctx>

0000157e <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    1586:	c0 91 80 01 	lds	r28, 0x0180	; 0x800180 <CDB+0x2>
    158a:	d0 91 81 01 	lds	r29, 0x0181	; 0x800181 <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    158e:	00 91 7e 01 	lds	r16, 0x017E	; 0x80017e <CDB>
    1592:	10 91 7f 01 	lds	r17, 0x017F	; 0x80017f <CDB+0x1>
    1596:	f8 01       	movw	r30, r16
    1598:	80 85       	ldd	r24, Z+8	; 0x08
    159a:	91 85       	ldd	r25, Z+9	; 0x09
    159c:	02 97       	sbiw	r24, 0x02	; 2
    159e:	29 f4       	brne	.+10     	; 0x15aa <osEE_idle_hook_wrapper+0x2c>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
    15a0:	20 97       	sbiw	r28, 0x00	; 0
    15a2:	f1 f3       	breq	.-4      	; 0x15a0 <osEE_idle_hook_wrapper+0x22>
      p_idle_hook();
    15a4:	fe 01       	movw	r30, r28
    15a6:	09 95       	icall
    15a8:	f6 cf       	rjmp	.-20     	; 0x1596 <osEE_idle_hook_wrapper+0x18>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    15aa:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <CDB+0x4>
    15ae:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <CDB+0x5>
}
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    15ba:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <osEE_idle_task_terminate>

000015be <osEE_scheduler_task_activated>:
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	da 01       	movw	r26, r20
    15cc:	14 96       	adiw	r26, 0x04	; 4
    15ce:	ed 90       	ld	r14, X+
    15d0:	fc 90       	ld	r15, X
    15d2:	15 97       	sbiw	r26, 0x05	; 5
    15d4:	e7 01       	movw	r28, r14
    15d6:	98 81       	ld	r25, Y
    15d8:	1d 96       	adiw	r26, 0x0d	; 13
    15da:	8c 91       	ld	r24, X
    15dc:	98 17       	cp	r25, r24
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <osEE_scheduler_task_activated+0x24>
    15e0:	4c c0       	rjmp	.+152    	; 0x167a <osEE_scheduler_task_activated+0xbc>
    15e2:	fb 01       	movw	r30, r22
    15e4:	01 90       	ld	r0, Z+
    15e6:	f0 81       	ld	r31, Z
    15e8:	e0 2d       	mov	r30, r0
    15ea:	00 81       	ld	r16, Z
    15ec:	11 81       	ldd	r17, Z+1	; 0x01
    15ee:	d8 01       	movw	r26, r16
    15f0:	14 96       	adiw	r26, 0x04	; 4
    15f2:	6d 91       	ld	r22, X+
    15f4:	7c 91       	ld	r23, X
    15f6:	15 97       	sbiw	r26, 0x05	; 5
    15f8:	9f 5f       	subi	r25, 0xFF	; 255
    15fa:	98 83       	st	Y, r25
    15fc:	a4 81       	ldd	r26, Z+4	; 0x04
    15fe:	b5 81       	ldd	r27, Z+5	; 0x05
    1600:	23 2b       	or	r18, r19
    1602:	11 f1       	breq	.+68     	; 0x1648 <osEE_scheduler_task_activated+0x8a>
    1604:	eb 01       	movw	r28, r22
    1606:	99 81       	ldd	r25, Y+1	; 0x01
    1608:	e7 01       	movw	r28, r14
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	98 17       	cp	r25, r24
    160e:	e0 f4       	brcc	.+56     	; 0x1648 <osEE_scheduler_task_activated+0x8a>
    1610:	8d 91       	ld	r24, X+
    1612:	9c 91       	ld	r25, X
    1614:	11 97       	sbiw	r26, 0x01	; 1
    1616:	95 83       	std	Z+5, r25	; 0x05
    1618:	84 83       	std	Z+4, r24	; 0x04
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	eb 01       	movw	r28, r22
    1620:	9b 83       	std	Y+3, r25	; 0x03
    1622:	8a 83       	std	Y+2, r24	; 0x02
    1624:	13 96       	adiw	r26, 0x03	; 3
    1626:	5c 93       	st	X, r21
    1628:	4e 93       	st	-X, r20
    162a:	12 97       	sbiw	r26, 0x02	; 2
    162c:	86 81       	ldd	r24, Z+6	; 0x06
    162e:	97 81       	ldd	r25, Z+7	; 0x07
    1630:	11 96       	adiw	r26, 0x01	; 1
    1632:	9c 93       	st	X, r25
    1634:	8e 93       	st	-X, r24
    1636:	b7 83       	std	Z+7, r27	; 0x07
    1638:	a6 83       	std	Z+6, r26	; 0x06
    163a:	51 83       	std	Z+1, r21	; 0x01
    163c:	40 83       	st	Z, r20
    163e:	ba 01       	movw	r22, r20
    1640:	c8 01       	movw	r24, r16
    1642:	0e 94 c0 0b 	call	0x1780	; 0x1780 <osEE_change_context_from_running>
    1646:	16 c0       	rjmp	.+44     	; 0x1674 <osEE_scheduler_task_activated+0xb6>
    1648:	e7 01       	movw	r28, r14
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	9b 81       	ldd	r25, Y+3	; 0x03
    164e:	89 2b       	or	r24, r25
    1650:	21 f4       	brne	.+8      	; 0x165a <osEE_scheduler_task_activated+0x9c>
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9b 83       	std	Y+3, r25	; 0x03
    1658:	8a 83       	std	Y+2, r24	; 0x02
    165a:	8d 91       	ld	r24, X+
    165c:	9c 91       	ld	r25, X
    165e:	11 97       	sbiw	r26, 0x01	; 1
    1660:	95 83       	std	Z+5, r25	; 0x05
    1662:	84 83       	std	Z+4, r24	; 0x04
    1664:	11 96       	adiw	r26, 0x01	; 1
    1666:	1c 92       	st	X, r1
    1668:	1e 92       	st	-X, r1
    166a:	bd 01       	movw	r22, r26
    166c:	cf 01       	movw	r24, r30
    166e:	02 96       	adiw	r24, 0x02	; 2
    1670:	0e 94 be 0c 	call	0x197c	; 0x197c <osEE_scheduler_rq_insert>
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 c0       	rjmp	.+4      	; 0x167e <osEE_scheduler_task_activated+0xc0>
    167a:	84 e0       	ldi	r24, 0x04	; 4
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	08 95       	ret

0000168c <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    168c:	af 92       	push	r10
    168e:	bf 92       	push	r11
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    16a2:	db 01       	movw	r26, r22
    16a4:	cd 91       	ld	r28, X+
    16a6:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    16a8:	fe 01       	movw	r30, r28
    16aa:	01 91       	ld	r16, Z+
    16ac:	11 91       	ld	r17, Z+
    16ae:	7f 01       	movw	r14, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    16b0:	d8 01       	movw	r26, r16
    16b2:	14 96       	adiw	r26, 0x04	; 4
    16b4:	cd 90       	ld	r12, X+
    16b6:	dc 90       	ld	r13, X
    16b8:	15 97       	sbiw	r26, 0x05	; 5

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    16ba:	fa 01       	movw	r30, r20
    16bc:	11 83       	std	Z+1, r17	; 0x01
    16be:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    16c0:	d6 01       	movw	r26, r12
    16c2:	12 96       	adiw	r26, 0x02	; 2
    16c4:	8d 91       	ld	r24, X+
    16c6:	9c 91       	ld	r25, X
    16c8:	13 97       	sbiw	r26, 0x03	; 3
    16ca:	04 97       	sbiw	r24, 0x04	; 4
    16cc:	59 f5       	brne	.+86     	; 0x1724 <osEE_scheduler_task_terminated+0x98>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    16ce:	b7 01       	movw	r22, r14
    16d0:	c5 01       	movw	r24, r10
    16d2:	0e 94 c5 0c 	call	0x198a	; 0x198a <osEE_scheduler_core_pop_running>
    16d6:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    16d8:	88 81       	ld	r24, Y
    16da:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    16dc:	08 17       	cp	r16, r24
    16de:	19 07       	cpc	r17, r25
    16e0:	a9 f0       	breq	.+42     	; 0x170c <osEE_scheduler_task_terminated+0x80>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    16e2:	d8 01       	movw	r26, r16
    16e4:	14 96       	adiw	r26, 0x04	; 4
    16e6:	ed 91       	ld	r30, X+
    16e8:	fc 91       	ld	r31, X
    16ea:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    16ec:	1b 96       	adiw	r26, 0x0b	; 11
    16ee:	2c 91       	ld	r18, X
    16f0:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    16f2:	20 81       	ld	r18, Z
    16f4:	21 50       	subi	r18, 0x01	; 1
    16f6:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    16f8:	21 11       	cpse	r18, r1
    16fa:	03 c0       	rjmp	.+6      	; 0x1702 <osEE_scheduler_task_terminated+0x76>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    16fc:	13 82       	std	Z+3, r1	; 0x03
    16fe:	12 82       	std	Z+2, r1	; 0x02
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <osEE_scheduler_task_terminated+0x88>
  } else {
    p_tcb->status = OSEE_TASK_READY;
    1702:	21 e0       	ldi	r18, 0x01	; 1
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	33 83       	std	Z+3, r19	; 0x03
    1708:	22 83       	std	Z+2, r18	; 0x02
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <osEE_scheduler_task_terminated+0x88>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    170c:	f6 01       	movw	r30, r12
    170e:	20 81       	ld	r18, Z
    1710:	21 50       	subi	r18, 0x01	; 1
    1712:	20 83       	st	Z, r18
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    1714:	2c 81       	ldd	r18, Y+4	; 0x04
    1716:	3d 81       	ldd	r19, Y+5	; 0x05
    1718:	da 01       	movw	r26, r20
    171a:	2d 93       	st	X+, r18
    171c:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    171e:	5d 83       	std	Y+5, r21	; 0x05
    1720:	4c 83       	std	Y+4, r20	; 0x04
    1722:	23 c0       	rjmp	.+70     	; 0x176a <osEE_scheduler_task_terminated+0xde>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    1724:	6e 81       	ldd	r22, Y+6	; 0x06
    1726:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    1728:	fb 01       	movw	r30, r22
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	9f 83       	std	Y+7, r25	; 0x07
    1730:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    1732:	d8 01       	movw	r26, r16
    1734:	1b 96       	adiw	r26, 0x0b	; 11
    1736:	8c 91       	ld	r24, X
    1738:	f6 01       	movw	r30, r12
    173a:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	93 83       	std	Z+3, r25	; 0x03
    1742:	82 83       	std	Z+2, r24	; 0x02
      if (p_tcb_term->current_num_of_act == 1U) {
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    1744:	a8 01       	movw	r20, r16
    1746:	c7 01       	movw	r24, r14
    1748:	0e 94 be 0c 	call	0x197c	; 0x197c <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    174c:	b7 01       	movw	r22, r14
    174e:	c5 01       	movw	r24, r10
    1750:	0e 94 12 0c 	call	0x1824	; 0x1824 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    1754:	89 2b       	or	r24, r25
    1756:	39 f4       	brne	.+14     	; 0x1766 <osEE_scheduler_task_terminated+0xda>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    1758:	ee 81       	ldd	r30, Y+6	; 0x06
    175a:	ff 81       	ldd	r31, Y+7	; 0x07
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    1760:	99 83       	std	Y+1, r25	; 0x01
    1762:	88 83       	st	Y, r24
    1764:	02 c0       	rjmp	.+4      	; 0x176a <osEE_scheduler_task_terminated+0xde>
        } else {
          p_tdb_to = p_ccb->p_curr;
    1766:	88 81       	ld	r24, Y
    1768:	99 81       	ldd	r25, Y+1	; 0x01
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	08 95       	ret

00001780 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    1780:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    1782:	a4 81       	ldd	r26, Z+4	; 0x04
    1784:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    1786:	12 96       	adiw	r26, 0x02	; 2
    1788:	2d 91       	ld	r18, X+
    178a:	3c 91       	ld	r19, X
    178c:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    178e:	44 e0       	ldi	r20, 0x04	; 4
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	13 96       	adiw	r26, 0x03	; 3
    1794:	5c 93       	st	X, r21
    1796:	4e 93       	st	-X, r20
    1798:	12 97       	sbiw	r26, 0x02	; 2
    179a:	dc 01       	movw	r26, r24
    179c:	12 96       	adiw	r26, 0x02	; 2
    179e:	4d 91       	ld	r20, X+
    17a0:	5c 91       	ld	r21, X
    17a2:	13 97       	sbiw	r26, 0x03	; 3
    17a4:	62 81       	ldd	r22, Z+2	; 0x02
    17a6:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    17a8:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    17aa:	22 30       	cpi	r18, 0x02	; 2
    17ac:	31 05       	cpc	r19, r1
    17ae:	11 f4       	brne	.+4      	; 0x17b4 <osEE_change_context_from_running+0x34>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    17b0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    17b4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <osEE_hal_save_ctx_and_ready2stacked>

000017b8 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    17b8:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    17ba:	db 01       	movw	r26, r22
    17bc:	14 96       	adiw	r26, 0x04	; 4
    17be:	ed 91       	ld	r30, X+
    17c0:	fc 91       	ld	r31, X
    17c2:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    17c4:	22 81       	ldd	r18, Z+2	; 0x02
    17c6:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    17c8:	44 e0       	ldi	r20, 0x04	; 4
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	53 83       	std	Z+3, r21	; 0x03
    17ce:	42 83       	std	Z+2, r20	; 0x02
    17d0:	12 96       	adiw	r26, 0x02	; 2
    17d2:	6d 91       	ld	r22, X+
    17d4:	7c 91       	ld	r23, X
    17d6:	13 97       	sbiw	r26, 0x03	; 3

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    17d8:	22 30       	cpi	r18, 0x02	; 2
    17da:	31 05       	cpc	r19, r1
    17dc:	11 f4       	brne	.+4      	; 0x17e2 <osEE_change_context_from_task_end+0x2a>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    17de:	0c 94 ce 00 	jmp	0x19c	; 0x19c <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    17e2:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_ready2stacked>

000017e6 <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    17e6:	dc 01       	movw	r26, r24
    17e8:	12 96       	adiw	r26, 0x02	; 2
    17ea:	6d 91       	ld	r22, X+
    17ec:	7c 91       	ld	r23, X
    17ee:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    17f0:	ed 91       	ld	r30, X+
    17f2:	fc 91       	ld	r31, X
    17f4:	40 81       	ld	r20, Z
    17f6:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    17f8:	db 01       	movw	r26, r22
    17fa:	ed 91       	ld	r30, X+
    17fc:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    17fe:	22 89       	ldd	r18, Z+18	; 0x12
    1800:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    1802:	21 15       	cp	r18, r1
    1804:	31 05       	cpc	r19, r1
    1806:	29 f4       	brne	.+10     	; 0x1812 <osEE_idle_task_terminate+0x2c>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    1808:	db 01       	movw	r26, r22
    180a:	ed 93       	st	X+, r30
    180c:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    180e:	0c 94 ce 00 	jmp	0x19c	; 0x19c <osEE_hal_restore_ctx>
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
  } while ((p_tos != NULL) && (p_tos != p_bos));
    1812:	24 17       	cp	r18, r20
    1814:	35 07       	cpc	r19, r21
    1816:	c1 f3       	breq	.-16     	; 0x1808 <osEE_idle_task_terminate+0x22>
    1818:	f9 01       	movw	r30, r18
    181a:	f1 cf       	rjmp	.-30     	; 0x17fe <osEE_idle_task_terminate+0x18>

0000181c <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    181c:	f8 94       	cli
    181e:	ff cf       	rjmp	.-2      	; 0x181e <__vector_default+0x2>

00001820 <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    1820:	ec e1       	ldi	r30, 0x1C	; 28
    1822:	08 95       	ret

00001824 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    182c:	ec 01       	movw	r28, r24
    182e:	a8 81       	ld	r26, Y
    1830:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    1832:	eb 01       	movw	r28, r22
    1834:	e8 81       	ld	r30, Y
    1836:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
    1838:	16 96       	adiw	r26, 0x06	; 6
    183a:	cd 91       	ld	r28, X+
    183c:	dc 91       	ld	r29, X
    183e:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    1840:	20 97       	sbiw	r28, 0x00	; 0
    1842:	b1 f0       	breq	.+44     	; 0x1870 <osEE_scheduler_core_rq_preempt_stk+0x4c>
    p_ret_tdb = p_ret_sn->p_tdb;
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    1848:	30 97       	sbiw	r30, 0x00	; 0
    184a:	e1 f1       	breq	.+120    	; 0x18c4 <osEE_scheduler_core_rq_preempt_stk+0xa0>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    184c:	ec 01       	movw	r28, r24
    184e:	0c 81       	ldd	r16, Y+4	; 0x04
    1850:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    1852:	22 81       	ldd	r18, Z+2	; 0x02
    1854:	33 81       	ldd	r19, Z+3	; 0x03
    1856:	e9 01       	movw	r28, r18
    1858:	4c 81       	ldd	r20, Y+4	; 0x04
    185a:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    185c:	e8 01       	movw	r28, r16
    185e:	39 81       	ldd	r19, Y+1	; 0x01
    1860:	ea 01       	movw	r28, r20
    1862:	29 81       	ldd	r18, Y+1	; 0x01
    1864:	32 17       	cp	r19, r18
    1866:	70 f5       	brcc	.+92     	; 0x18c4 <osEE_scheduler_core_rq_preempt_stk+0xa0>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    1868:	22 e0       	ldi	r18, 0x02	; 2
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	e8 01       	movw	r28, r16
    186e:	0b c0       	rjmp	.+22     	; 0x1886 <osEE_scheduler_core_rq_preempt_stk+0x62>
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    1870:	30 97       	sbiw	r30, 0x00	; 0
    1872:	41 f1       	breq	.+80     	; 0x18c4 <osEE_scheduler_core_rq_preempt_stk+0xa0>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    1874:	ec 01       	movw	r28, r24
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    187a:	ec 01       	movw	r28, r24
    187c:	4c 81       	ldd	r20, Y+4	; 0x04
    187e:	5d 81       	ldd	r21, Y+5	; 0x05
    1880:	22 e0       	ldi	r18, 0x02	; 2
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	ea 01       	movw	r28, r20
    1886:	3b 83       	std	Y+3, r19	; 0x03
    1888:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    188a:	20 81       	ld	r18, Z
    188c:	31 81       	ldd	r19, Z+1	; 0x01
    188e:	eb 01       	movw	r28, r22
    1890:	39 83       	std	Y+1, r19	; 0x01
    1892:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    1894:	c2 81       	ldd	r28, Z+2	; 0x02
    1896:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    1898:	4c 81       	ldd	r20, Y+4	; 0x04
    189a:	5d 81       	ldd	r21, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    189c:	16 96       	adiw	r26, 0x06	; 6
    189e:	2d 91       	ld	r18, X+
    18a0:	3c 91       	ld	r19, X
    18a2:	17 97       	sbiw	r26, 0x07	; 7
    18a4:	31 83       	std	Z+1, r19	; 0x01
    18a6:	20 83       	st	Z, r18
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    18a8:	17 96       	adiw	r26, 0x07	; 7
    18aa:	fc 93       	st	X, r31
    18ac:	ee 93       	st	-X, r30
    18ae:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    18b0:	cd 93       	st	X+, r28
    18b2:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    18b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    18b6:	fa 01       	movw	r30, r20
    18b8:	31 81       	ldd	r19, Z+1	; 0x01
    18ba:	32 17       	cp	r19, r18
    18bc:	28 f4       	brcc	.+10     	; 0x18c8 <osEE_scheduler_core_rq_preempt_stk+0xa4>
      p_tcb->current_prio = dispatch_prio;
    18be:	fa 01       	movw	r30, r20
    18c0:	21 83       	std	Z+1, r18	; 0x01
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <osEE_scheduler_core_rq_preempt_stk+0xa4>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	0f 91       	pop	r16
    18d0:	08 95       	ret

000018d2 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    18d2:	cf 92       	push	r12
    18d4:	df 92       	push	r13
    18d6:	ef 92       	push	r14
    18d8:	ff 92       	push	r15
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    18e2:	eb 01       	movw	r28, r22
    18e4:	aa 81       	ldd	r26, Y+2	; 0x02
    18e6:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    18e8:	14 96       	adiw	r26, 0x04	; 4
    18ea:	ed 91       	ld	r30, X+
    18ec:	fc 91       	ld	r31, X
    18ee:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    18f0:	41 15       	cp	r20, r1
    18f2:	51 05       	cpc	r21, r1
    18f4:	41 f0       	breq	.+16     	; 0x1906 <osEE_sn_priority_insert+0x34>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    18f6:	22 81       	ldd	r18, Z+2	; 0x02
    18f8:	33 81       	ldd	r19, Z+3	; 0x03
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	18 f0       	brcs	.+6      	; 0x1906 <osEE_sn_priority_insert+0x34>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1900:	1b 96       	adiw	r26, 0x0b	; 11
    1902:	2c 91       	ld	r18, X
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <osEE_sn_priority_insert+0x36>
    1906:	21 81       	ldd	r18, Z+1	; 0x01
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    1908:	dc 01       	movw	r26, r24
    190a:	ed 91       	ld	r30, X+
    190c:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    190e:	a0 e0       	ldi	r26, 0x00	; 0
    1910:	b0 e0       	ldi	r27, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    1912:	30 97       	sbiw	r30, 0x00	; 0
    1914:	d9 f0       	breq	.+54     	; 0x194c <osEE_sn_priority_insert+0x7a>
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    1916:	02 81       	ldd	r16, Z+2	; 0x02
    1918:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    191a:	e8 01       	movw	r28, r16
    191c:	cc 80       	ldd	r12, Y+4	; 0x04
    191e:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    1920:	41 15       	cp	r20, r1
    1922:	51 05       	cpc	r21, r1
    1924:	51 f0       	breq	.+20     	; 0x193a <osEE_sn_priority_insert+0x68>
    1926:	e6 01       	movw	r28, r12
    1928:	ea 80       	ldd	r14, Y+2	; 0x02
    192a:	fb 80       	ldd	r15, Y+3	; 0x03
    192c:	d2 e0       	ldi	r29, 0x02	; 2
    192e:	ed 16       	cp	r14, r29
    1930:	f1 04       	cpc	r15, r1
    1932:	18 f0       	brcs	.+6      	; 0x193a <osEE_sn_priority_insert+0x68>
      prio_to_check = p_cur_tdb->ready_prio;
    1934:	e8 01       	movw	r28, r16
    1936:	3b 85       	ldd	r19, Y+11	; 0x0b
    1938:	02 c0       	rjmp	.+4      	; 0x193e <osEE_sn_priority_insert+0x6c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    193a:	e6 01       	movw	r28, r12
    193c:	39 81       	ldd	r19, Y+1	; 0x01
    }

    if (new_task_prio <= prio_to_check)
    193e:	32 17       	cp	r19, r18
    1940:	28 f0       	brcs	.+10     	; 0x194c <osEE_sn_priority_insert+0x7a>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    1942:	df 01       	movw	r26, r30
    1944:	01 90       	ld	r0, Z+
    1946:	f0 81       	ld	r31, Z
    1948:	e0 2d       	mov	r30, r0
    194a:	e3 cf       	rjmp	.-58     	; 0x1912 <osEE_sn_priority_insert+0x40>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    194c:	10 97       	sbiw	r26, 0x00	; 0
    194e:	29 f0       	breq	.+10     	; 0x195a <osEE_sn_priority_insert+0x88>
    p_prev->p_next = p_sn_new;
    1950:	6d 93       	st	X+, r22
    1952:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <osEE_sn_priority_insert+0x92>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    195a:	dc 01       	movw	r26, r24
    195c:	6d 93       	st	X+, r22
    195e:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
  }

  p_sn_new->p_next = p_curr;
    1964:	eb 01       	movw	r28, r22
    1966:	f9 83       	std	Y+1, r31	; 0x01
    1968:	e8 83       	st	Y, r30

  return head_changed;
}
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	cf 90       	pop	r12
    197a:	08 95       	ret

0000197c <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    197c:	fb 01       	movw	r30, r22
    197e:	53 83       	std	Z+3, r21	; 0x03
    1980:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	50 e0       	ldi	r21, 0x00	; 0
    1986:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <osEE_sn_priority_insert>

0000198a <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    198a:	ef 92       	push	r14
    198c:	ff 92       	push	r15
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    1998:	fc 01       	movw	r30, r24
    199a:	c0 81       	ld	r28, Z
    199c:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    199e:	ee 80       	ldd	r14, Y+6	; 0x06
    19a0:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    19a2:	f7 01       	movw	r30, r14
    19a4:	80 81       	ld	r24, Z
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	9f 83       	std	Y+7, r25	; 0x07
    19aa:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    19ac:	c8 01       	movw	r24, r16
    19ae:	0e 94 12 0c 	call	0x1824	; 0x1824 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    19b2:	ee 81       	ldd	r30, Y+6	; 0x06
    19b4:	ff 81       	ldd	r31, Y+7	; 0x07

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    19b6:	89 2b       	or	r24, r25
    19b8:	51 f4       	brne	.+20     	; 0x19ce <osEE_scheduler_core_pop_running+0x44>
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    19ba:	30 97       	sbiw	r30, 0x00	; 0
    19bc:	19 f0       	breq	.+6      	; 0x19c4 <osEE_scheduler_core_pop_running+0x3a>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	03 c0       	rjmp	.+6      	; 0x19ca <osEE_scheduler_core_pop_running+0x40>
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    19c4:	f8 01       	movw	r30, r16
    19c6:	84 81       	ldd	r24, Z+4	; 0x04
    19c8:	95 81       	ldd	r25, Z+5	; 0x05
      }

      p_ccb->p_curr            = p_tdb_stk;
    19ca:	99 83       	std	Y+1, r25	; 0x01
    19cc:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    19ce:	c7 01       	movw	r24, r14
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	08 95       	ret

000019de <__udivmodsi4>:
    19de:	a1 e2       	ldi	r26, 0x21	; 33
    19e0:	1a 2e       	mov	r1, r26
    19e2:	aa 1b       	sub	r26, r26
    19e4:	bb 1b       	sub	r27, r27
    19e6:	fd 01       	movw	r30, r26
    19e8:	0d c0       	rjmp	.+26     	; 0x1a04 <__udivmodsi4_ep>

000019ea <__udivmodsi4_loop>:
    19ea:	aa 1f       	adc	r26, r26
    19ec:	bb 1f       	adc	r27, r27
    19ee:	ee 1f       	adc	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	a2 17       	cp	r26, r18
    19f4:	b3 07       	cpc	r27, r19
    19f6:	e4 07       	cpc	r30, r20
    19f8:	f5 07       	cpc	r31, r21
    19fa:	20 f0       	brcs	.+8      	; 0x1a04 <__udivmodsi4_ep>
    19fc:	a2 1b       	sub	r26, r18
    19fe:	b3 0b       	sbc	r27, r19
    1a00:	e4 0b       	sbc	r30, r20
    1a02:	f5 0b       	sbc	r31, r21

00001a04 <__udivmodsi4_ep>:
    1a04:	66 1f       	adc	r22, r22
    1a06:	77 1f       	adc	r23, r23
    1a08:	88 1f       	adc	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	1a 94       	dec	r1
    1a0e:	69 f7       	brne	.-38     	; 0x19ea <__udivmodsi4_loop>
    1a10:	60 95       	com	r22
    1a12:	70 95       	com	r23
    1a14:	80 95       	com	r24
    1a16:	90 95       	com	r25
    1a18:	9b 01       	movw	r18, r22
    1a1a:	ac 01       	movw	r20, r24
    1a1c:	bd 01       	movw	r22, r26
    1a1e:	cf 01       	movw	r24, r30
    1a20:	08 95       	ret

00001a22 <__tablejump2__>:
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	05 90       	lpm	r0, Z+
    1a28:	f4 91       	lpm	r31, Z
    1a2a:	e0 2d       	mov	r30, r0
    1a2c:	09 94       	ijmp

00001a2e <_exit>:
    1a2e:	f8 94       	cli

00001a30 <__stop_program>:
    1a30:	ff cf       	rjmp	.-2      	; 0x1a30 <__stop_program>
